#+TITLE: emacs config
#+AUTHOR: christian hageloch
#+STARTUP: overview 

* basic settings 
** remove startup screen
#+begin_src emacs-lisp
  (setq inhibit-startup-message t)
#+end_src
** disable menus and scrollbar 
#+begin_src emacs-lisp
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
#+end_src
** disable bell
#+begin_src emacs-lisp
  (setq ring-bell-function 'ignore)
#+end_src
** turn off blinking cursor
#+begin_src emacs-lisp
  (blink-cursor-mode -1)
#+end_src
** set utf-8 encoding
#+begin_src emacs-lisp
  (setq locale-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
#+end_src
** font 
#+begin_src emacs-lisp
  (set-face-attribute 'default nil
                      :font "Monoid"
                      :height 130
                      :weight 'medium)
  (add-to-list 'default-frame-alist '(font . "Monoid-13"))
  (setq global-prettify-symbols-mode t)
#+end_src
** reload configuration
#+begin_src emacs-lisp
  (defun config-reload ()
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
  (global-set-key (kbd "C-c r") 'config-reload)
#+end_src
** org-mode
**** basic
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)
  (custom-set-faces
   '(org-block-begin-line ((t (:background nil))))
   '(org-block ((t (:background nil))))
   '(org-block-end-line   ((t (:background nil)))))
  (setq org-hide-emphasis-markers t)
#+end_src
**** source code block syntax highlighting
#+begin_src emacs-lisp
  (setq org-src-tab-acts-natively t
        org-confirm-babel-evaluate nil
        org-edit-src-content-identation 0)
#+end_src
** dialog and some other stuff
#+begin_src emacs-lisp
  (setq use-dialog-box nil)
  (setq use-file-dialog nil)
  (setq electric-pair-pairs '(
                              (?\{ . ?\})
                              (?\( . ?\))
                              (?\[ . ?\])
                              (?\" . ?\")
                              ))
  (electric-pair-mode t)
  (add-hook 'org-mode-hook (lambda ()
                             (setq-local electric-pair-inhibit-predicate
                                         `(lambda (c)
                                            (if (char-equal c ?<) t (,electric-pair-inhibit-predicate c))))))
  (setq fringe-mode -1)
  (global-subword-mode 1)
  (global-display-line-numbers-mode -1)
  (column-number-mode 1)
#+end_src
** disable backups and auto-save
#+begin_src emacs-lisp
  (setq make-backup-files nil)
  (setq auto-save-default nil)
#+end_src
** change yes-or-no questions to y-or-n questions
#+begin_src emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+end_src
** indentation
#+begin_src emacs-lisp
  (setq-default indent-tabs-mode nil)
  (setq tab-width 4)
  (electric-indent-mode 1)
  (add-hook 'org-mode-hook
            (lambda () (setq evil-auto-indent nil)))
#+end_src
** line numbers
#+begin_src emacs-lisp
  (setq display-line-numbers-type 'relative)
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)
#+end_src
** text wrapping
#+begin_src emacs-lisp
  (add-hook 'text-mode-hook 'visual-line-mode)
#+end_src
** follow symlinks
#+begin_src emacs-lisp
 (setq find-file-visit-truename t)
#+end_src
* package list
#+begin_src emacs-lisp
  (setq package-archives 
        '(("melpa" . "https://melpa.org/packages/")
          ("elpa" . "https://elpa.gnu.org/packages/")))
#+end_src
* bootstrap use-package 
#+begin_src emacs-lisp
  (package-initialize)
  (setq use-package-always-ensure t)
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (eval-when-compile (require 'use-package))
#+end_src
* source code block tag expansion
#+begin_src emacs-lisp
  (use-package org-tempo
    :ensure nil)
#+end_src
* undo
#+begin_src emacs-lisp
  (use-package undo-fu)
#+end_src
* evil
** vim bindings
#+begin_src emacs-lisp
  (use-package evil
    :demand t
    :bind (("<escape>" . keyboard-escape-quit))
    :init
    ;; (setq evil-search-module 'evil-search)
    (setq evil-want-keybinding nil)
    (setq evil-undo-system 'undo-fu)
    :config
    (evil-mode 1))
#+end_src
** vim bindings everywhere else
#+begin_src emacs-lisp
  (use-package evil-collection
    :after evil
    :config
    (setq evil-want-integration t)
    (evil-collection-init))
#+end_src
** evil nerd commenter
#+begin_src emacs-lisp
  (use-package evil-nerd-commenter)
  (evilnc-default-hotkeys)
#+end_src
* languages
#+begin_src emacs-lisp
  (use-package markdown-mode
    :ensure t)
  (use-package lua-mode
    :ensure t)
  (use-package yaml-mode
    :ensure t)
  (use-package emmet-mode
    :ensure t
    :init
    (add-hook 'html-mode-hook #'emmet-mode))
  (use-package php-mode
    :ensure t)
#+end_src
* theme
#+begin_src emacs-lisp
  (setq modus-themes-bold-constructs t 
        modus-themes-italic-constructs nil
        modus-themes-subtle-line-numbers nil
        modus-themes-region '(bg-only no-extend)
        modus-themes-mode-line '(borderless)
        modus-themes-syntax '(yellow-comments faint alt-syntax))
  ;; (setq modus-themes-vivendi-color-overrides
  ;;       '((bg-main . "#1d2021") (bg-inactive . "#1d2021")))
  (setq modus-themes-headings
        '((1 . (1.4))
          (2 . (1.3))
          (3 . (1.2))
          (t . (1.1))))
  (setq modus-themes-scale-headings t)
  (load-theme 'modus-vivendi)
  (define-key global-map (kbd "<f5>") #'modus-themes-toggle)
#+end_src
* eye candy
** dired
#+begin_src emacs-lisp
  (use-package diredfl
    :ensure t
    :hook
    (dired-mode . diredfl-mode))
  (setq dired-listing-switches "-ahl --group-directories-first")
#+end_src
** doom-modeline
#+begin_src emacs-lisp
  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1))
#+end_src
* better bottom menu
#+begin_src emacs-lisp
  (setq ido-enable-flex-matching t)
  (setq ido-everywhere t)
  (ido-mode 1)
  (use-package ido-vertical-mode
    :ensure t
    :init
    (ido-vertical-mode 1))
  (setq ido-vertical-define-keys 'C-n-and-C-p-only)

  (use-package smex
    :ensure t
    :init (smex-initialize)
    :bind
    ("M-x" . smex))
#+end_src

* dashboard
#+begin_src emacs-lisp
  (use-package dashboard
    :ensure t
    :init
    (dashboard-setup-startup-hook))
  (setq initial-buffer-choice (lambda () (get-buffer-create "*dashboard*")))
  (setq dashboard-items nil)
  (setq dashboard-center-content t)
  (setq dashboard-startup-banner 'official)
#+end_src

* async
#+begin_src emacs-lisp
  (use-package async
    :ensure t
    :init (dired-async-mode 1))
#+end_src
* swiper 
#+begin_src emacs-lisp
  (use-package swiper
    :ensure t
    :bind ("C-s" . 'swiper))
#+end_src

* projectile
#+begin_src emacs-lisp
  (use-package projectile
    :ensure t
    :init
    (projectile-mode 1)
    (add-to-list 'projectile-globally-ignored-modes "org-mode"))
#+end_src 

* ide
** company
#+begin_src emacs-lisp
  (use-package company
    :ensure t
    :init
    (setq company-idle-delay 0)
    (setq company-minium-prefix-length 3))
#+end_src

** treesitter
#+begin_src emacs-lisp
  (use-package tree-sitter-langs
    :ensure t)
  (use-package tree-sitter
    :ensure t
    :init
    (global-tree-sitter-mode)
    (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode)
    :custom
    (custom-set-faces
     '(italic ((t nil)))
     '(tree-sitter-hl-face:property ((t (:inherit font-lock-constant-face))))))
#+end_src
** rainbow-mode
#+begin_src emacs-lisp
  (use-package rainbow-mode
    :ensure t)
#+end_src
** yasnippet
#+begin_src emacs-lisp
  (use-package yasnippet-snippets
    :ensure t)
  (use-package yasnippet
    :ensure t
    :init
    (yas-global-mode t))
#+end_src
** eglot
#+begin_src emacs-lisp
  (use-package eglot
    :ensure t)
#+end_src
* useful file modules
#+begin_src emacs-lisp
  (use-package counsel
    :ensure t
    :bind
    ("M-x" . counsel-M-x))
  (use-package recentf
    :ensure nil
    :config
    (setq recentf-max-saved-items 200)
    (setq recentf-filename-handlers
          (append '(abbreviate-file-name) recentf-filename-handlers))
    (recentf-mode))
  (use-package sudo-edit)
#+end_src

* vterm
#+begin_src emacs-lisp
  (use-package vterm
    :ensure t
    :init
    (global-set-key (kbd "<s-return>") 'vterm)
    (setq vterm-timer-delay 0.01))
#+end_src

* git
#+begin_src emacs-lisp
  (use-package magit
    :ensure t
    :config
    (setq magit-push-always-verify nil)
    (setq magit-display-buffer-function #'magit-display-buffer-fullframe-status-v1)
    (setq git-commit-summary-max-length 50)
    :bind
    ("C-x g" . magit-status))

  (use-package git-gutter
    :ensure t
    :hook (prog-mode . git-gutter-mode) (org-mode . git-gutter-mode)
    :config
    (setq git-gutter:update-interval 0.02))

  (use-package git-gutter-fringe
    :ensure t)
  #+end_src

* emms
#+begin_src emacs-lisp
  (use-package emms)
  (require 'emms-setup)
  (emms-all)
  (emms-default-players)
  (emms-mode-line 0)
  (emms-playing-time 1)
  (setq emms-source-file-default-directory "~/Music/"
        emms-playlist-buffer-name "*Music*"
        emms-info-asynchronously t
        emms-source-file-directory-tree-function 'emms-source-file-directory-tree-find)
#+end_src

* presentation
#+begin_src emacs-lisp
  (use-package org-tree-slide
    :ensure t
    :custom
    (org-image-actual-width nil))
#+end_src

* pdf
#+begin_src emacs-lisp
  (use-package pdf-tools
    :pin manual
    :config
    (pdf-tools-install)
    (setq-default pdf-view-display-size 'fit-width)
    (define-key pdf-view-mode-map (kbd "C-s") 'isearch-forward)
    :custom
    (pdf-annot-activate-created-annotations t "automatically annotate highlights"))

  (setq TeX-view-program-selection '((output-pdf "PDF Tools"))
        TeX-view-program-list '(("PDF Tools" TeX-pdf-tools-sync-view))
        TeX-source-correlate-start-server t)

  (add-hook 'TeX-after-compilation-finished-functions
            #'TeX-revert-document-buffer)
#+end_src

* keybindings
** general
#+begin_src emacs-lisp
  (use-package general
    :ensure t
    :config
    (general-evil-setup t))
  (general-create-definer my-leader-def
    :prefix "SPC")
#+end_src
** whichkey
#+begin_src emacs-lisp
  (use-package which-key
    :ensure t
    :init
    (which-key-mode))
#+end_src
** buffers
#+begin_src emacs-lisp
  (my-leader-def
   :states 'normal
   :keymaps 'override
   "b i"   '(ibuffer :whichkey "Ibuffer")
   "b b"   '(counsel-switch-buffer :which-key "Switch Buffers")
   "b c"   '(clone-indirect-buffer-other-window :which-key "Clone indirect buffer other window")
   "b k"   '(kill-current-buffer :which-key "Kill current buffer")
   "b n"   '(next-buffer :which-key "Next buffer")
   "b p"   '(previous-buffer :which-key "Previous buffer")
   "b B"   '(ibuffer-list-buffers :which-key "Ibuffer list buffers")
   "b r"   '(revert-buffer :which-key "Revert Buffer")
   "b K"   '(kill-buffer :which-key "Kill buffer"))
#+end_src
** files
#+begin_src emacs-lisp
  (my-leader-def
   :states '(normal visual)
   :keymaps 'override
   "."     '(counsel-find-file :which-key "Find file")
   "f f"   '(counsel-fzf :whichkey "FZF")
   "f r"   '(counsel-recentf :which-key "Recent files")
   "f s"   '(save-buffer :which-key "Save file")
   "f u"   '(sudo-edit-find-file :which-key "Sudo find file")
   "f y"   '(dt/show-and-copy-buffer-path :which-key "Yank file path")
   "f C"   '(copy-file :which-key "Copy file")
   "f D"   '(delete-file :which-key "Delete file")
   "f R"   '(rename-file :which-key "Rename file")
   "f S"   '(write-file :which-key "Save file as...")
   "f U"   '(sudo-edit :which-key "Sudo edit file"))
#+end_src
** splits 
#+begin_src emacs-lisp
  (my-leader-def
    :states 'normal
    :keymaps 'override
    "w c"   '(evil-window-delete :which-key "Close window")
    "w n"   '(evil-window-new :which-key "New window")
    "w s"   '(evil-window-split :which-key "Horizontal split window")
    "w v"   '(evil-window-vsplit :which-key "Vertical split window")
    ;; Window motions
    "w h"   '(evil-window-left :which-key "Window left")
    "w j"   '(evil-window-down :which-key "Window down")
    "w k"   '(evil-window-up :which-key "Window up")
    "w l"   '(evil-window-right :which-key "Window right")
    "w w"   '(evil-window-next :which-key "Goto next window")
    ;; winner mode
    "w <left>"  '(winner-undo :which-key "Winner undo")
    "w <right>" '(winner-redo :which-key "Winner redo"))
#+end_src
** dired
***** keybindings to open dired
#+begin_src emacs-lisp
  (my-leader-def
    :states 'normal
    :keymaps 'override
    "d d" '(dired :whichkey "Open Dired")
    "d j" '(dired-jump :whichkey "Jump to current directory in dired"))
#+end_src
***** keybindings within dired
#+begin_src emacs-lisp
  (evil-define-key 'normal dired-mode-map
    (kbd "M-RET") 'dired-display-file
    (kbd "h") 'dired-up-directory
    (kbd "l") 'dired-find-file
    (kbd "m") 'dired-mark
    (kbd "t") 'dired-toggle-marks
    (kbd "u") 'dired-unmark
    (kbd "C") 'dired-do-copy
    (kbd "D") 'dired-do-delete
    (kbd "J") 'dired-goto-file
    (kbd "M") 'dired-do-chmod
    (kbd "O") 'dired-do-chown
    (kbd "P") 'dired-do-print
    (kbd "R") 'dired-do-rename
    (kbd "T") 'dired-do-touch
    (kbd "Y") 'dired-copy-filenamecopy-filename-as-kill 
    (kbd "Z") 'dired-do-compress
    (kbd "+") 'dired-create-directory
    (kbd "-") 'dired-do-kill-lines
    (kbd "% l") 'dired-downcase
    (kbd "% m") 'dired-mark-files-regexp
    (kbd "% u") 'dired-upcase
    (kbd "* %") 'dired-mark-files-regexp
    (kbd "* .") 'dired-mark-extension
    (kbd "* /") 'dired-mark-directories
    (kbd "; d") 'epa-dired-do-decrypt
    (kbd "; e") 'epa-dired-do-encrypt)
#+end_src
** emms
#+begin_src emacs-lisp
  (my-leader-def
    :states 'normal
    :keymaps 'override
    "m m" '(emms :whichkey "EMMS")
    "m b" '(emms-smart-browse :whichkey "EMMS Smart Browse")
    "m i" '(emms-show :whichkey "EMMS show current song")
    "m n" '(emms-next :whichkey "EMMS next song")
    "m p" '(emms-previous :whichkey "EMMS previous song")
    "m l" '(emms-seek-forward :whichkey "EMMS go 10s forward")
    "m t" '(emms-toggle-repeat-track :whichkey "EMMS toggle repeat")
    "m h" '(emms-seek-backward :whichkey "EMMS go 10s backward"))
#+end_src
** compile
#+begin_src emacs-lisp
  (my-leader-def
    :states 'normal
    :kaymaps 'override
    "c c" '(compile :whichkey "Compile"))
#+end_src

