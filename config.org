#+TITLE: emacs config
#+AUTHOR: Christian Hageloch
#+OPTIONS: toc:2

[[emacs.png]]


* Package list
#+begin_src emacs-lisp
  (setq package-archives
        '(("melpa" . "https://melpa.org/packages/")
          ("elpa" . "https://elpa.gnu.org/packages/")))
#+end_src


* Bootstrap use-package
#+begin_src emacs-lisp
  (package-initialize)
  (setq use-package-always-ensure t)
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (eval-when-compile (require 'use-package))
#+end_src


* Keybinding to reload the configuration file
#+begin_src emacs-lisp
  (defun config-reload ()
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
  (global-set-key (kbd "C-c r") 'config-reload)
#+end_src


* Basic settings

** Encoding
#+begin_src emacs-lisp
  (setq locale-encoding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
#+end_src

** Dialog
#+begin_src emacs-lisp
  (setq use-dialog-box nil)
  (setq use-file-dialog nil)
#+end_src

** Electric pairs
#+begin_src emacs-lisp
  (setq electric-pair-pairs '(
			    (?\{ . ?\})
			    (?\( . ?\))
			    (?\[ . ?\])
			    (?\" . ?\")
			    ))
  (electric-pair-mode t)
#+end_src

** Disable backups and auto-save
#+begin_src emacs-lisp
  (setq make-backup-files nil)
  (setq auto-save-default nil)
#+end_src

** Change yes-or-no to y-or-n
#+begin_src emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+end_src

** Line numbers
#+begin_src emacs-lisp
  (setq display-line-numbers-type 'relative)
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)
  (add-hook 'prog-mode-hook 'hl-line-mode)
#+end_src

** Text wrapping
  (add-hook 'text-mode-hook 'visual-line-mode)

** Follow symlinks
#+begin_src emacs-lisp
  (setq find-file-visit-truename t)
#+end_src


* Appearance

** Remove startup screen
#+begin_src emacs-lisp
  (setq inhibit-startup-message t)
#+end_src

** Fringes
#+begin_src emacs-lisp
  (set-fringe-mode 0) 
#+end_src

** Disable menus and scrollbar
#+begin_src emacs-lisp
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
#+end_src

** Disable blinking cursor
#+begin_src emacs-lisp
  (blink-cursor-mode -1)
#+end_src

** Font
#+begin_src emacs-lisp
  (set-face-attribute 'default nil
		      :font "Monoid"
		      :height 90)
  (add-to-list 'default-frame-alist '(font . "Monoid-9"))
#+end_src

** Theme
*** Modus themes
#+begin_src emacs-lisp
  (use-package modus-themes
    :ensure t
    :init
    (setq modus-themes-bold-constructs t
          modus-themes-italic-construct nil
          modus-themes-subtle-line-numbers nil
          ;; modus-themes-mode-line '(borderless (padding . 4))
          modus-themes-mode-line '(borderless)
          modus-themes-syntax '(yellow-comments faint green-strings)
          modus-themes-org-blocks 'gray-background))
          ;; modus-themes-headings '((1 . (1.4 overline))
          ;;                         (2 . (1.3 overline))
          ;;                         (3 . (1.2 overline))
          ;;                         (t . (1.1 overline)))
          ;; modus-themes-scale-headings t))
  (define-key global-map (kbd "C-c t") #'modus-themes-toggle)
#+end_src

*** Doom themes
#+begin_src emacs-lisp
  (use-package doom-themes
    :ensure t
    :config
    (setq doom-themes-enable-bold t
          doom-themes-enable-italic nil)
    (doom-themes-org-config))
#+end_src

*** Load the theme
#+begin_src emacs-lisp
  (load-theme 'modus-vivendi t)
#+end_src

** Mode-line
#+begin_src emacs-lisp
  (display-battery-mode 1)
  (column-number-mode 1)

  (defun display-current-time ()
    (interactive)
    (message (format-time-string "%Y-%m-%d %H:%M:%S")))
  (define-key global-map (kbd "<f1>") #'display-current-time)

  (defun display-wifi-status ()
    (interactive)
    (message (shell-command-to-string "sb-internet-emacs")))
  (define-key global-map (kbd "<f2>") #'display-wifi-status)

  (use-package doom-modeline
    :ensure t
    :init
    (setq doom-modeline-height 26
          doom-modeline-icon nil
          doom-modeline-lsp t)
    (doom-modeline-mode 1)
    )

  (use-package all-the-icons
    :ensure t)
#+end_src

** Beacon
#+begin_src emacs-lisp
  (use-package beacon
    :ensure t
    :init
    (beacon-mode 1))
#+end_src

** Org mode
#+begin_src emacs-lisp
  (setq org-ellipsis " ")
  (setq orc-src-fontify-natively t)
  (setq src-tab-acts-natively t)
  (setq org-fontify-quote-and-verse-blocks t)
  (setq org-fontify-whole-block-delimiter-line t)
  (setq org-confirm-babel-evaluate nil)
  (setq org-export-with-smart-quotes t)
  (setq org-src-window-setup 'current-window)
  (setq org-hide-emphasis-markers t)
  (add-hook 'org-mode-hook 'org-indent-mode)
#+end_src


* Evil (Vim)

** Undo
#+begin_src emacs-lisp
  (use-package undo-fu
    :ensure t)
#+end_src

** Evil mode
#+begin_src emacs-lisp
  (use-package evil
    :demand t
    :bind (("<escape>" . keyboard-escape-quit))
    :init
    (setq evil-want-keybinding nil)
    (setq evil-undo-system 'undo-fu)
    (setq evil-want-fine-undo 'fine)
    (setq evil-want-C-u-scroll t)
    :config
    (evil-mode 1))
#+end_src

** Evil-Collection
#+begin_src emacs-lisp
  (use-package evil-collection
    :after evil
    :config
    (setq evil-want-integration t)
    (evil-collection-init))
#+end_src

** Evil Nerd Commenter
#+begin_src emacs-lisp
  (use-package evil-nerd-commenter
    :ensure t
    :config
    (evilnc-default-hotkeys))
#+end_src


* Languages
#+begin_src emacs-lisp
  (use-package markdown-mode
    :ensure t)
  (use-package lua-mode
    :ensure t)
  (use-package yaml-mode
    :ensure t)
  (use-package emmet-mode
    :ensure t
    :init
    (add-hook 'html-mode-hook #'emmet-mode))
  (use-package php-mode
    :ensure t)
  (use-package haskell-mode
    :ensure t)
  (autoload 'matlab-mode "matlab" "Matlab Editing Mode" t)
  (add-to-list
   'auto-mode-alist
   '("\\.m$" . matlab-mode))
  (setq matlab-indent-function t)
  (setq matlab-shell-command-switches '("-nosplassh" "-nodesktop" "-nojvm"))
  (setq matlab-shell-command "matlab")
#+end_src


* Eye candy
#+begin_src emacs-lisp
  (use-package dashboard
    :ensure t
    :init
    (dashboard-setup-startup-hook))
  (setq initial-buffer-choice (lambda () (get-buffer-create "*dashboard*")))
  (setq dashboard-items nil)
  (setq dashboard-center-content t)
  (setq dashboard-startup-banner 'official)
#+end_src


* IDE Features

** Better menu
#+begin_src emacs-lisp
  (setq ido-enable-flex-matching t)
  (setq ido-everywhere t)
  (ido-mode 1)
  (use-package ido-vertical-mode
    :ensure t
    :init
    (ido-vertical-mode 1))
  (setq ido-vertical-define-keys 'C-n-and-C-p-only)
#+end_src

** Searching / Swiper
#+begin_src emacs-lisp
  (use-package swiper
    :ensure t
    :bind ("C-s" . swiper))

  (use-package evil-anzu
    :ensure t
    :init
    (global-anzu-mode))
#+end_src

** Ripgrep
#+begin_src emacs-lisp
  (use-package rg
    :ensure t
    :init
    (rg-enable-default-bindings))
#+end_src

** Async
#+begin_src emacs-lisp
  (use-package async
    :ensure t
    :init
    (dired-async-mode 1))
#+end_src

** VTerm
#+begin_src emacs-lisp
  (use-package vterm
    :ensure t
    :init
    (setq vterm-timer-delay 0.01))

  (use-package vterm-toggle
    :ensure t
    :config
    (setq vterm-toggle-fullscreen-p nil)
    (add-to-list 'display-buffer-alist
                 '((lambda (buffer-or-name _)
                     (let ((buffer (get-buffer buffer-or-name)))
                       (with-current-buffer buffer
                         (or (equal major-mode 'vterm-mode)
                             (string-prefix-p vterm-buffer-name (buffer-name buffer))))))
                   (display-buffer-reuse-window display-buffer-at-bottom)
                   (reusable-frames . visible)
                   (window-height . 0.3))))

#+end_src

** Projectile
#+begin_src emacs-lisp
  (use-package projectile
    :ensure t
    :init
    (projectile-mode +1)
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
    (add-to-list 'projectile-globally-ignored-modes "org-mode"))
#+end_src

** Completion
*** Company
#+begin_src emacs-lisp
  (use-package company
    :ensure t
    :init
    (setq company-idle-delay 0)
    (setq company-minium-prefix-length 3))
#+end_src
*** Yasnippet
#+begin_src emacs-lisp
  (use-package yasnippet-snippets
    :ensure t)
  (use-package yasnippet
    :ensure t
    :init
    (add-hook 'prog-mode-hook 'yas-minor-mode))
#+end_src

** Tree-sitter
#+begin_src emacs-lisp
  (use-package tree-sitter-langs)

  (use-package tree-sitter
    :defer t
    :init
    (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode)
    (global-tree-sitter-mode)
    :custom
    (custom-set-faces
     '(italic ((t nil)))
     '(tree-sitter-hl-face:property ((t (:inherit font-lock-constant-face)))))
    :config
    (setq tree-sitter-debug-jump-buttons t
          tree-sitter-debug-highlight-jump-region t))

  (use-package evil-textobj-tree-sitter
    :ensure t
    :init
    (define-key evil-outer-text-objects-map "f" (evil-textobj-tree-sitter-get-textobj "function.outer"))
    (define-key evil-inner-text-objects-map "f" (evil-textobj-tree-sitter-get-textobj "function.inner"))
    (define-key evil-outer-text-objects-map "c" (evil-textobj-tree-sitter-get-textobj "comment.outer"))
    (define-key evil-outer-text-objects-map "C" (evil-textobj-tree-sitter-get-textobj "class.outer"))
    (define-key evil-outer-text-objects-map "a" (evil-textobj-tree-sitter-get-textobj ("conditional.outer" "loop.outer"))))
#+end_src

** Rainbow mode
#+begin_src emacs-lisp
  (use-package rainbow-mode
    :ensure t)
#+end_src

** Counsel 
#+begin_src emacs-lisp
  (use-package counsel
    :ensure t)
#+end_src

** Smex
#+begin_src emacs-lisp
  (use-package smex 
    :ensure t
    :init (smex-initialize)
    :bind
    ("M-x" . smex))
#+end_src

** Recentf
#+begin_src emacs-lisp
  (use-package recentf
    :ensure nil
    :config
    (setq recentf-max-saved-items 200)
    (setq recentf-filename-handlers
          (append '(abbreviate-file-name) recentf-filename-handlers))
    (recentf-mode))
#+end_src

** Sudo Edit
#+begin_src emacs-lisp
  (use-package sudo-edit
    :ensure t)
#+end_src

** Magit
#+begin_src emacs-lisp
  (use-package magit
    :ensure t
    :config
    (setq magit-push-always-verify nil)
    (setq magit-display-buffer-function #'magit-display-buffer-fullframe-status-v1)
    (setq magit-repository-directories
          '(("~/.local/src"  . 2)
            ("~/.config/" . 2)))
    (setq git-commit-summary-max-length 50)
    :bind
    ("C-x g" . magit-status)
    ("C-x C-g" . magit-list-repositories))
#+end_src

** LSP 
#+begin_src emacs-lisp
  (use-package lsp-mode
    :ensure t
    :commands (lsp lsp-defered)
    :init
    (setq lsp-keymap-prefix "C-c l")
    :config
    (lsp-enable-which-key-integration t))
#+end_src

#+begin_src emacs-lisp
  (use-package lsp-pyright
    :ensure t
    :hook (python-mode . (lambda ()
                           (require 'lsp-pyright)
                           (lsp)))
#+end_src


* Some other useful packages

** EMMS
#+begin_src emacs-lisp
  (use-package emms
    :ensure t)
  (require 'emms-setup)
  (emms-all)
  (emms-default-players)
  (emms-mode-line 0)
  (emms-playing-time 1)
  (setq emms-source-file-default-directory "~/Music/"
        emms-playlist-buffer-name "*Music*"
        emms-info-asynchronously t
        emms-source-file-directory-tree-function 'emms-source-file-directory-tree-find)
#+end_src

** Org-tree-slide
#+begin_src emacs-lisp
  (use-package org-tree-slide
    :ensure t
    :custom
    (org-image-actual-width nil))
#+end_src

** Pdf-Tools
#+begin_src emacs-lisp
  (use-package pdf-tools
    :config
    (pdf-tools-install)
    (setq-default pdf-view-display-size 'fit-width)
    (define-key pdf-view-mode-map (kbd "C-s") 'isearch-forward)
    :custom
    (pdf-annot-activate-created-annotations t "automatically annotate highlights"))

  (setq TeX-view-program-selection '((output-pdf "PDF Tools"))
        TeX-view-program-list '(("PDF Tools" TeX-pdf-tools-sync-view))
        TeX-source-correlate-start-server t)

  (add-hook 'TeX-after-compilation-finished-functions
            #'TeX-revert-document-buffer)
#+end_src


* Keybindings

** General
#+begin_src emacs-lisp
  (use-package general
    :ensure t
    :config
    (general-evil-setup t))
  (general-create-definer my-leader-def
                          :prefix "SPC")
#+end_src

** Whichkey
#+begin_src emacs-lisp
  (use-package which-key
    :ensure t
    :init
    (which-key-mode))
#+end_src

** Keybindings for buffers
#+begin_src emacs-lisp
  (defun toggle-maximize-buffer () "Maximize buffer"
         (interactive)
         (if (= 1 (length (window-list)))
             (jump-to-register '_) 
           (progn
             (window-configuration-to-register '_)
             (delete-other-windows))))

  (my-leader-def
    :states 'normal
    :keymaps 'override
    "b i"   '(ibuffer :whichkey "Ibuffer")
    "b b"   '(counsel-switch-buffer :which-key "Switch Buffers")
    "b f"   '(toggle-maximize-buffer :which-key "Toggle maximize buffer")
    "b c"   '(clone-indirect-buffer-other-window :which-key "Clone indirect buffer other window")
    "b k"   '(kill-current-buffer :which-key "Kill current buffer")
    "b n"   '(next-buffer :which-key "Next buffer")
    "b p"   '(previous-buffer :which-key "Previous buffer")
    "b B"   '(ibuffer-list-buffers :which-key "Ibuffer list buffers")
    "b r"   '(revert-buffer :which-key "Revert Buffer")
    "b K"   '(kill-buffer :which-key "Kill buffer"))
#+end_src

** Keybindings for files
#+begin_src emacs-lisp
  (my-leader-def
    :states '(normal visual)
    :keymaps 'override
    "."     '(find-file :which-key "Find file")
    "f f"   '(counsel-fzf :whichkey "FZF")
    "f r"   '(counsel-recentf :which-key "Recent files")
    "f s"   '(save-buffer :which-key "Save file")
    "f u"   '(sudo-edit-find-file :which-key "Sudo find file")
    "f y"   '(dt/show-and-copy-buffer-path :which-key "Yank file path")
    "f C"   '(copy-file :which-key "Copy file")
    "f D"   '(delete-file :which-key "Delete file")
    "f R"   '(rename-file :which-key "Rename file")
    "f S"   '(write-file :which-key "Save file as...")
    "f U"   '(sudo-edit :which-key "Sudo edit file"))
#+end_src

** Keybindings for managing splits
#+begin_src emacs-lisp
  (my-leader-def
    :states 'normal
    :keymaps 'override
    "w c"   '(evil-window-delete :which-key "Close window")
    "w n"   '(evil-window-new :which-key "New window")
    "w s"   '(evil-window-split :which-key "Horizontal split window")
    "w v"   '(evil-window-vsplit :which-key "Vertical split window")
    ;; Window motions
    "w h"   '(evil-window-left :which-key "Window left")
    "w j"   '(evil-window-down :which-key "Window down")
    "w k"   '(evil-window-up :which-key "Window up")
    "w l"   '(evil-window-right :which-key "Window right")
    "w w"   '(evil-window-next :which-key "Goto next window")
    ;; winner mode
    "w <left>"  '(winner-undo :which-key "Winner undo")
    "w <right>" '(winner-redo :which-key "Winner redo"))
#+end_src

** Keybindings for Dired
#+begin_src emacs-lisp
  (my-leader-def
    :states 'normal
    :keymaps 'override
    "d d" '(dired :whichkey "Open Dired")
    "d j" '(dired-jump :whichkey "Jump to current directory in dired"))
#+end_src

** Keybindings within Dired
#+begin_src emacs-lisp
  (evil-define-key 'normal dired-mode-map
    (kbd "M-RET") 'dired-display-file
    (kbd "<") 'dired-up-directory
    (kbd ">") 'dired-find-file
    (kbd "m") 'dired-mark
    (kbd "t") 'dired-toggle-marks
    (kbd "u") 'dired-unmark
    (kbd "C") 'dired-do-copy
    (kbd "D") 'dired-do-delete
    (kbd "J") 'dired-goto-file
    (kbd "M") 'dired-do-chmod
    (kbd "O") 'dired-do-chown
    (kbd "P") 'dired-do-print
    (kbd "R") 'dired-do-rename
    (kbd "T") 'dired-do-touch
    (kbd "Y") 'dired-copy-filenamecopy-filename-as-kill 
    (kbd "Z") 'dired-do-compress
    (kbd "+") 'dired-create-directory
    (kbd "-") 'dired-do-kill-lines
    (kbd "% l") 'dired-downcase
    (kbd "% m") 'dired-mark-files-regexp
    (kbd "% u") 'dired-upcase
    (kbd "* %") 'dired-mark-files-regexp
    (kbd "* .") 'dired-mark-extension
    (kbd "* /") 'dired-mark-directories
    (kbd "; d") 'epa-dired-do-decrypt
    (kbd "; e") 'epa-dired-do-encrypt)
#+end_src

** Keybings for EMMS
#+begin_src emacs-lisp
  (my-leader-def
    :states 'normal
    :keymaps 'override
    "m m" '(emms :whichkey "EMMS")
    "m b" '(emms-smart-browse :whichkey "EMMS Smart Browse")
    "m i" '(emms-show :whichkey "EMMS show current song")
    "m n" '(emms-next :whichkey "EMMS next song")
    "m p" '(emms-previous :whichkey "EMMS previous song")
    "m l" '(emms-seek-forward :whichkey "EMMS go 10s forward")
    "m t" '(emms-toggle-repeat-track :whichkey "EMMS toggle repeat")
    "m h" '(emms-seek-backward :whichkey "EMMS go 10s backward"))
#+end_src

** Keybindings for Compiling
#+begin_src emacs-lisp
  (my-leader-def
    :states 'normal
    :kaymaps 'override
    "c c" '(compile :whichkey "Compile"))
#+end_src

** Keybindings for Matlab
#+begin_src emacs-lisp
  (defun open-matlab-shell ()
    (interactive)
    (split-window-below 40)
    (other-window 1)
    (matlab-shell))
  (my-leader-def
    :states 'normal
    :keymaps 'override
    "c m" '(open-matlab-shell :whichkey "Open Matlab shell"))
#+end_src

** Keybindings for vterm
#+begin_src emacs-lisp
  (my-leader-def
    :states 'normal
    :keymaps 'override
    "o T" '(vterm :whichkey "Vterm")
    "o t" '(vterm-toggle :whichkey "Vterm-toggle"))
#+end_src
