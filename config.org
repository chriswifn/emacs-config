#+TITLE: emacs config
#+AUTHOR: christian hageloch
#+OPTIONS: toc:2 


This is my configuration for GNU Emacs. This configuration is not minimal but also not overloaded with packages 
that I don't use. I try to keep it as minimal as possible by only installing packages that I use and removing those
that I don't.

[[emacs.png]]


* Table of Contents :TOC:
- [[#package-list][package list]]
- [[#bootstrap-use-package][bootstrap use-package]]
- [[#keybinding-to-reload-the-configuration-file][keybinding to reload the configuration file]]
- [[#basic-settings][basic settings]]
  - [[#encoding][encoding]]
  - [[#dialog-and-some-other-stuff][dialog and some other stuff]]
  - [[#disable-backups-and-auto-save][disable backups and auto-save]]
  - [[#change-yes-or-no-questions][change yes-or-no questions]]
  - [[#line-numbers][line numbers]]
  - [[#text-wrapping][text wrapping]]
  - [[#follow-symlinks][follow symlinks]]
- [[#appearance][appearance]]
  - [[#remove-startup-screen][remove startup screen]]
  - [[#disable-menus-and-scrollbar][disable menus and scrollbar]]
  - [[#some-functions-to-display-some-output-in-minibuffer][some functions to display some output in minibuffer]]
  - [[#disable-blinking-cursor][disable blinking cursor]]
  - [[#beacon-mode][beacon mode]]
  - [[#font][font]]
  - [[#org-mode][org-mode]]
  - [[#theme][theme]]
- [[#evil-mode][evil-mode]]
  - [[#undo][undo]]
  - [[#vim-bindings][vim bindings]]
  - [[#vim-bindings-everywhere-else][vim bindings everywhere else]]
  - [[#evil-nerd-commenter][evil-nerd-commenter]]
- [[#languages][languages]]
- [[#eye-candy][eye candy]]
  - [[#dashboard][dashboard]]
- [[#ide-features][ide features]]
  - [[#better-bottom-menu][better bottom menu]]
  - [[#searchingswiper][searching/swiper]]
  - [[#async][async]]
  - [[#projectile][projectile]]
  - [[#completioncompany][completion/company]]
  - [[#snippetsyasnippet][snippets/yasnippet]]
  - [[#better-syntax-highlightingtreesitter][better syntax highlighting/treesitter]]
  - [[#colored-hex-codesrainbow-mode][colored hex-codes/rainbow-mode]]
  - [[#useful-file-modulescounselrecentfsudo-edit][useful file modules/counsel+recentf+sudo-edit]]
  - [[#a-better-terminalvterm][a better terminal/vterm]]
  - [[#git-integrationmagitgit-gutter][git integration/magit+git-gutter]]
  - [[#lspeglot][lsp/eglot]]
- [[#some-other-packages-that-are-nice-to-have][Some other packages that are nice to have]]
  - [[#music-playeremms][music player/emms]]
  - [[#presentationsorg-tree-slide][presentations/org-tree-slide]]
  - [[#pdfpdf-tools][pdf/pdf-tools]]
- [[#keybindings][keybindings]]
  - [[#general][general]]
  - [[#whichkey][whichkey]]
  - [[#keybings-for-buffers][keybings for buffers]]
  - [[#keybindgs-for-files][keybindgs for files]]
  - [[#keybindings-for-managing-splits][keybindings for managing splits]]
  - [[#keybindings-for-dired][keybindings for dired]]
  - [[#keybindgs-for-emms][keybindgs for emms]]
  - [[#keybings-for-compiling][keybings for compiling]]

* package list
Set melpa and elpa as package archives for installing packages. Most of them are not in elpa so melpa is
important.
#+begin_src emacs-lisp
  (setq package-archives
	'(("melpa" . "https://melpa.org/packages/")
	  ("elpa" . "https://elpa.gnu.org/packages/")))
#+end_src


* bootstrap use-package
I use use-package for easy package-management and installation.
#+begin_src emacs-lisp
  (package-initialize)
  (setq use-package-always-ensure t)
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (eval-when-compile (require 'use-package))
#+end_src


* keybinding to reload the configuration file
Because I am writing this configuration in org-mode I am not in a .el file when I'm changing something.
A keybinding to run org-babel-load-file is solving that issue.
#+begin_src emacs-lisp
  (defun config-reload ()
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
  (global-set-key (kbd "C-c r") 'config-reload)
#+end_src


* basic settings
Some basic settings for a better experience.

** encoding
These are some basic settings for encoding
#+begin_src emacs-lisp
  (setq locale-encoding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
#+end_src

** dialog and some other stuff
Dialog is annoying and pair completion is nice to have.
#+begin_src emacs-lisp
  (setq use-dialog-box nil)
  (setq use-file-dialog nil)
  (setq electric-pair-pairs '(
                              (?\{ . ?\})
                              (?\( . ?\))
                              (?\[ . ?\])
                              (?\" . ?\")
                              ))
  (electric-pair-mode t)
  (column-number-mode 1)
#+end_src

** disable backups and auto-save
Disable backups and auto-save because they get in the way.
#+begin_src emacs-lisp
  (setq make-backup-files nil)
  (setq auto-save-default nil)
#+end_src

** change yes-or-no questions
Changing yes-or-no questions to y-or-no questions avoids mental overhead.
#+begin_src emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+end_src

** line numbers
I use relative numbers for Vim movements. Line numbers should only be visible in a programming environment.
#+begin_src emacs-lisp
  (setq display-line-numbers-type 'relative)
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)
#+end_src

** text wrapping
Text wrapping is so much better than scrolling to the end of a line
#+begin_src emacs-lisp
  (add-hook 'text-mode-hook 'visual-line-mode)
#+end_src

** follow symlinks
I use symlinks to manage my dotfiles and some other git repositories. Following symlinks is nice for that
#+begin_src emacs-lisp
  (setq find-file-visit-truename t)
#+end_src


* appearance
It is important for the editor window to look good (that includes the theme and window decorations)

** remove startup screen
The startup screen is pointless because I am going to install dashboard later on.
#+begin_src emacs-lisp
  (setq inhibit-startup-message t)
#+end_src

** disable menus and scrollbar
I want emacs to be a blank window without any window decorations.
#+begin_src emacs-lisp
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
#+end_src

** some functions to display some output in minibuffer 
#+begin_src emacs-lisp
  (defun display-current-time ()
    (interactive)
    (message (format-time-string "%Y-%m-%d %H:%M:%S")))
  (define-key global-map (kbd "<f1>") #'display-current-time)
#+end_src

#+begin_src emacs-lisp
  (defun display-wifi-status ()
    (interactive)
    (message (shell-command-to-string "sb-internet-emacs")))
  (define-key global-map (kbd "<f2>") #'display-wifi-status)
#+end_src

** disable blinking cursor
The blinking cursor is distracting, so I turn it off.
#+begin_src emacs-lisp
  (blink-cursor-mode -1)
#+end_src

** beacon mode
Beacon mode helps to keep track of the cursor
#+begin_src emacs-lisp
  (use-package beacon
    :ensure t
    :config
    (beacon-mode 1))
#+end_src

** font
The font has to be readable and easy on the eyes. My choice is the Monoid font.
I prefer a bigger font because it is easier on the eyes.
The second part is for emacs-client.
#+begin_src emacs-lisp
  (set-face-attribute 'default nil
		      :font "Monoid"
		      :height 130
		      :weight 'medium)
  (add-to-list 'default-frame-alist '(font . "Monoid-13"))
#+end_src

** org-mode
Org-mode is pretty ugly out of the box. Some modifications are necessary.
#+begin_src emacs-lisp
  (setq org-ellipsis " ")
  (setq orc-src-fontify-natively t)
  (setq orc-src-tab-acts-natively t)
  (setq org-fontify-quote-and-verse-blocks t)
  (setq org-fontify-whole-block-delimiter-line t)
  (setq org-confirm-babel-evaluate nil)
  (setq org-export-with-smart-quotes t)
  (setq org-src-window-setup 'current-window)
  (setq org-hide-emphasis-markes t)
  (add-hook 'org-mode-hook 'org-indent-mode)

  (use-package toc-org
    :commands toc-org-enable
    :init (add-hook 'org-mode-hook 'toc-org-enable))

  (add-hook 'haskell-mode-hook #'(lambda () (eldoc-mode -1)))
#+end_src

** theme
The modus-themes are a great choice for a dark and bright theme while maintaining readability.
They are build into emacs but installing them manually has the advantage of faster updates.
#+begin_src emacs-lisp
  (use-package modus-themes
    :ensure t
    :init
    (setq modus-themes-bold-constructs t
          modus-themes-italic-constructs nil
          modus-themes-subtle-line-numbers nil
          modus-themes-mode-line '(borderless (padding . 4))
          modus-themes-syntax '(yellow-comments faint green-strings)
          modus-themes-headings '((1 . (1.4 overline))
                                  (2 . (1.3 overline))
                                  (3 . (1.2 overline))
                                  (t . (1.1 overline)))
          modus-themes-scale-headings t))
          ;; modus-themes-org-blocks 'gray-background))
    (load-theme 'modus-vivendi t)
    (define-key global-map (kbd "<f5>") #'modus-themes-toggle)
  (display-battery-mode 1)
#+end_src


* evil-mode
Vim motions are the superior way of editing text.

** undo
I need an undo package for "u" to work
#+begin_src emacs-lisp
    (use-package undo-fu
      :ensure t)
#+end_src

** vim bindings
Vim motions are the superior way of editing text.
#+begin_src emacs-lisp
  (use-package evil
    :demand t
    :bind (("<escape>" . keyboard-escape-quit))
    :init
    (setq evil-want-keybinding nil)
    (setq evil-undo-system 'undo-fu)
    (setq evil-want-fine-undo 'fine)
    (setq evil-want-C-u-scroll t)
    :config
    (evil-mode 1))
#+end_src

** vim bindings everywhere else
Vim motions should be available in every mode
#+begin_src emacs-lisp
  (use-package evil-collection
    :after evil
    :config
    (setq evil-want-integration t)
    (evil-collection-init))
#+end_src

** evil-nerd-commenter
Commenting lines with one keybinding is nice to have
#+begin_src emacs-lisp
  (use-package evil-nerd-commenter
    :ensure t
    :config
    (evilnc-default-hotkeys))
#+end_src


* languages
These are some language-modes that are not installed by default and I often use.
#+begin_src emacs-lisp
  (use-package markdown-mode
    :ensure t)
  (use-package lua-mode
    :ensure t)
  (use-package yaml-mode
    :ensure t)
  (use-package emmet-mode
    :ensure t
    :init
    (add-hook 'html-mode-hook #'emmet-mode))
  (use-package php-mode
    :ensure t)
  (use-package haskell-mode
    :ensure t)
#+end_src

* eye candy
This is a section for some nice plugins for the eyes that are pretty much pointless.

** dashboard
Dashboard is a startup screen for emacs instead of the standard one.
#+begin_src emacs-lisp
  (use-package dashboard
    :ensure t
    :init
    (dashboard-setup-startup-hook))
  (setq initial-buffer-choice (lambda () (get-buffer-create "*dashboard*")))
  (setq dashboard-items nil)
  (setq dashboard-center-content t)
  (setq dashboard-startup-banner 'official)
#+end_src


* ide features
These is a list of packages that provide a better editing experience.

** better bottom menu
Smex is a nice bottom menu in sync with ido-vertical-mode.
#+begin_src emacs-lisp
  (setq ido-enable-flex-matching t)
  (setq ido-everywhere t)
  (ido-mode 1)
  (use-package ido-vertical-mode
    :ensure t
    :init
    (ido-vertical-mode 1))
  (setq ido-vertical-define-keys 'C-n-and-C-p-only)
#+end_src

** searching/swiper
#+begin_src emacs-lisp
  (use-package swiper
    :ensure t
    :bind ("C-s" . swiper))
#+end_src

** async
I want asynchronous jobs everywhere I can.
#+begin_src emacs-lisp
  (use-package async
    :ensure t
    :init
    (dired-async-mode 1))
#+end_src

** projectile
Projectile is propably the most used emacs package.
#+begin_src emacs-lisp
  (use-package projectile
    :ensure t
    :init
    (projectile-mode 1)
    (add-to-list 'projectile-globally-ignored-modes "org-mode"))
#+end_src

** completion/company
I use company as a completion engine
#+begin_src emacs-lisp
  (use-package company
    :ensure t
    :init
    (setq company-idle-delay 0)
    (setq company-minium-prefix-length 3))
#+end_src

** snippets/yasnippet
Yasnippet is a great snippet engine. It requires yasnippet-snippets to provide some useful snippets for many languages.
#+begin_src emacs-lisp
  (use-package yasnippet-snippets
    :ensure t)
  (use-package yasnippet
    :ensure t
    :init
    (add-hook 'prog-mode-hook 'yas-minor-mode))
#+end_src

** better syntax highlighting/treesitter
Treesitter is able to provide better syntax highlighting than the builtin one.
#+begin_src emacs-lisp
  (use-package tree-sitter-langs
    :ensure t)
  (use-package tree-sitter
    :ensure t
    :init
    (global-tree-sitter-mode)
    (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode)
    :custom
    (custom-set-faces
     '(italic ((t nil)))
     '(tree-sitter-hl-face:property ((t (:inherit font-lock-constant-face))))))
#+end_src

** colored hex-codes/rainbow-mode
Sometimes it is useful to see the actual color of a hex code or some other color code.
#+begin_src emacs-lisp
  (use-package rainbow-mode
    :ensure t)
#+end_src

** useful file modules/counsel+recentf+sudo-edit
Counsel: nice bottom menu
recentf: visit recently edited files
sudo-edit: edit files with sudo priviliges
#+begin_src emacs-lisp
  (use-package counsel
    :ensure t
    :bind
    ("M-x" . counsel-M-x))

  (use-package recentf
    :ensure nil
    :config
    (setq recentf-max-saved-items 200)
    (setq recentf-filename-handlers
          (append '(abbreviate-file-name) recentf-filename-handlers))
    (recentf-mode))

  (use-package sudo-edit)
#+end_src

** a better terminal/vterm
A terminal is essential in any text editor. It has to be fast and as close to a real terminal as possible.
#+begin_src emacs-lisp
  (use-package vterm
    :ensure t
    :init
    (global-set-key (kbd "<s-return>") 'vterm)
    (setq vterm-timer-delay 0.01))
#+end_src

** git integration/magit+git-gutter
Magit is THE KILLER FEATURE of emacs.
Git-gutter provides visual indicators of changes inside a git directory/file.
#+begin_src emacs-lisp
  (use-package magit
    :ensure t
    :config
    (setq magit-push-always-verify nil)
    (setq magit-display-buffer-function #'magit-display-buffer-fullframe-status-v1)
    (setq magit-repository-directories
          '(("~/.local/src"  . 2)
            ("~/.config/" . 2)))
    (setq git-commit-summary-max-length 50)
    :bind
    ("C-x g" . magit-status)
    ("C-x C-g" . magit-list-repositories))

  (use-package git-gutter
    :ensure t
    :hook (prog-mode . git-gutter-mode) (org-mode . git-gutter-mode)
    :config
    (setq git-gutter:update-interval 0.02))

  (use-package git-gutter-fringe
    :ensure t)
#+end_src

** lsp/eglot
Eglot is a simple and fast implementation for lsp inside emacs. The individual lsp-servers have to be installed manually but work out of the box.
#+begin_src emacs-lisp
  (use-package eglot
    :ensure t)
#+end_src


* Some other packages that are nice to have
This is a list of packages that are nice to have.

** music player/emms
Emms is a fantastic music player. The music player should be part of the editor for an alround great experience.
#+begin_src emacs-lisp
  (use-package emms
    :ensure t)
  (require 'emms-setup)
  (emms-all)
  (emms-default-players)
  (emms-mode-line 0)
  (emms-playing-time 1)
  (setq emms-source-file-default-directory "~/Music/"
        emms-playlist-buffer-name "*Music*"
        emms-info-asynchronously t
        emms-source-file-directory-tree-function 'emms-source-file-directory-tree-find)
#+end_src

** presentations/org-tree-slide
Sometimes I want to be able to give a presentation in org-mode.
#+begin_src emacs-lisp
  (use-package org-tree-slide
    :ensure t
    :custom
    (org-image-actual-width nil))
#+end_src

** pdf/pdf-tools
It is nice to be able to view pdfs inside your text editor.
#+begin_src emacs-lisp
  (use-package pdf-tools
    :pin manual
    :config
    (pdf-tools-install)
    (setq-default pdf-view-display-size 'fit-width)
    (define-key pdf-view-mode-map (kbd "C-s") 'isearch-forward)
    :custom
    (pdf-annot-activate-created-annotations t "automatically annotate highlights"))

  (setq TeX-view-program-selection '((output-pdf "PDF Tools"))
        TeX-view-program-list '(("PDF Tools" TeX-pdf-tools-sync-view))
        TeX-source-correlate-start-server t)

  (add-hook 'TeX-after-compilation-finished-functions
            #'TeX-revert-document-buffer)
#+end_src


* keybindings
These are my custom keybindings.

** general
General is a plugin to easily set keybindings using a leader key.
#+begin_src emacs-lisp
  (use-package general
    :ensure t
    :config
    (general-evil-setup t))
  (general-create-definer my-leader-def
                          :prefix "SPC")
#+end_src

** whichkey
Whichkey is a package to show possible keybindings in a mini-buffer.
#+begin_src emacs-lisp
  (use-package which-key
    :ensure t
    :init
    (which-key-mode))
#+end_src

** keybings for buffers
#+begin_src emacs-lisp
  (my-leader-def
    :states 'normal
    :keymaps 'override
    "b i"   '(ibuffer :whichkey "Ibuffer")
    "b b"   '(counsel-switch-buffer :which-key "Switch Buffers")
    "b c"   '(clone-indirect-buffer-other-window :which-key "Clone indirect buffer other window")
    "b k"   '(kill-current-buffer :which-key "Kill current buffer")
    "b n"   '(next-buffer :which-key "Next buffer")
    "b p"   '(previous-buffer :which-key "Previous buffer")
    "b B"   '(ibuffer-list-buffers :which-key "Ibuffer list buffers")
    "b r"   '(revert-buffer :which-key "Revert Buffer")
    "b K"   '(kill-buffer :which-key "Kill buffer"))
#+end_src

** keybindgs for files
#+begin_src emacs-lisp
  (my-leader-def
    :states '(normal visual)
    :keymaps 'override
    "."     '(counsel-find-file :which-key "Find file")
    "f f"   '(counsel-fzf :whichkey "FZF")
    "f r"   '(counsel-recentf :which-key "Recent files")
    "f s"   '(save-buffer :which-key "Save file")
    "f u"   '(sudo-edit-find-file :which-key "Sudo find file")
    "f y"   '(dt/show-and-copy-buffer-path :which-key "Yank file path")
    "f C"   '(copy-file :which-key "Copy file")
    "f D"   '(delete-file :which-key "Delete file")
    "f R"   '(rename-file :which-key "Rename file")
    "f S"   '(write-file :which-key "Save file as...")
    "f U"   '(sudo-edit :which-key "Sudo edit file"))
#+end_src

** keybindings for managing splits
#+begin_src emacs-lisp
  (my-leader-def
    :states 'normal
    :keymaps 'override
    "w c"   '(evil-window-delete :which-key "Close window")
    "w n"   '(evil-window-new :which-key "New window")
    "w s"   '(evil-window-split :which-key "Horizontal split window")
    "w v"   '(evil-window-vsplit :which-key "Vertical split window")
    ;; Window motions
    "w h"   '(evil-window-left :which-key "Window left")
    "w j"   '(evil-window-down :which-key "Window down")
    "w k"   '(evil-window-up :which-key "Window up")
    "w l"   '(evil-window-right :which-key "Window right")
    "w w"   '(evil-window-next :which-key "Goto next window")
    ;; winner mode
    "w <left>"  '(winner-undo :which-key "Winner undo")
    "w <right>" '(winner-redo :which-key "Winner redo"))
#+end_src

** keybindings for dired
Keybindings to open dired
#+begin_src emacs-lisp
  (my-leader-def
    :states 'normal
    :keymaps 'override
    "d d" '(dired :whichkey "Open Dired")
    "d j" '(dired-jump :whichkey "Jump to current directory in dired"))
#+end_src

Keybindings within dired
#+begin_src emacs-lisp
  (evil-define-key 'normal dired-mode-map
    (kbd "M-RET") 'dired-display-file
    (kbd "h") 'dired-up-directory
    (kbd "l") 'dired-find-file
    (kbd "m") 'dired-mark
    (kbd "t") 'dired-toggle-marks
    (kbd "u") 'dired-unmark
    (kbd "C") 'dired-do-copy
    (kbd "D") 'dired-do-delete
    (kbd "J") 'dired-goto-file
    (kbd "M") 'dired-do-chmod
    (kbd "O") 'dired-do-chown
    (kbd "P") 'dired-do-print
    (kbd "R") 'dired-do-rename
    (kbd "T") 'dired-do-touch
    (kbd "Y") 'dired-copy-filenamecopy-filename-as-kill 
    (kbd "Z") 'dired-do-compress
    (kbd "+") 'dired-create-directory
    (kbd "-") 'dired-do-kill-lines
    (kbd "% l") 'dired-downcase
    (kbd "% m") 'dired-mark-files-regexp
    (kbd "% u") 'dired-upcase
    (kbd "* %") 'dired-mark-files-regexp
    (kbd "* .") 'dired-mark-extension
    (kbd "* /") 'dired-mark-directories
    (kbd "; d") 'epa-dired-do-decrypt
    (kbd "; e") 'epa-dired-do-encrypt)
#+end_src

** keybindgs for emms
#+begin_src emacs-lisp
  (my-leader-def
    :states 'normal
    :keymaps 'override
    "m m" '(emms :whichkey "EMMS")
    "m b" '(emms-smart-browse :whichkey "EMMS Smart Browse")
    "m i" '(emms-show :whichkey "EMMS show current song")
    "m n" '(emms-next :whichkey "EMMS next song")
    "m p" '(emms-previous :whichkey "EMMS previous song")
    "m l" '(emms-seek-forward :whichkey "EMMS go 10s forward")
    "m t" '(emms-toggle-repeat-track :whichkey "EMMS toggle repeat")
    "m h" '(emms-seek-backward :whichkey "EMMS go 10s backward"))
#+end_src

** keybings for compiling
#+begin_src emacs-lisp
  (my-leader-def
    :states 'normal
    :kaymaps 'override
    "c c" '(compile :whichkey "Compile"))
#+end_src
