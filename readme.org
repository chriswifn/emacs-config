#+title: Emacs Configuration
#+author: Christian Hageloch
#+startup: overview

Currently tailored for GNU Emacs 28.2.

* Early init file
:PROPERTIES:
:header-args: :tangle early-init.el
:END:

~straight.el~ is used as the package management system.
To prevent ~package.el~ from loading packages and garbage-collection:

#+begin_src emacs-lisp
;;; early-init.el --- Early Init File -*- lexical-binding: t; no-byte-compile: t -*-
(setq gc-cons-threshold (* 50 1000 1000))
(setq package-enable-at-startup nil)
#+end_src

Disable gui elements:

#+begin_src emacs-lisp
(defun chris/toggle-gui-elements (&optional on-off)
  "Toggle menu bar, tool bar, scroll bars, and tool tip modes. If
  optional ON-OFF is not specified, then toggle on/off state. If
  ON-OFF is 0 or 1, then turn gui elements OFF or ON respectively."
  (when (fboundp 'scroll-bar-mode)
    (scroll-bar-mode (or on-off (not scroll-bar-mode))))
  (when  (fboundp 'tool-bar-mode)
    (tool-bar-mode (or on-off (not tool-bar-mode))))
  (unless (memq (window-system) '(mac ns))
    (when (fboundp 'menu-bar-mode)
      (menu-bar-mode (or on-off (not menu-bar-mode)))))
  ;; tooltips in echo-aera
  (when (fboundp 'tooltip-mode)
    (tooltip-mode (or on-off (not tooltip-mode)))))

(chris/toggle-gui-elements 0)

(setq inhibit-splash-screen t
      use-file-dialog nil)
#+end_src


* Package management
:PROPERTIES:
:header-args: :tangle init.el
:END:

** ~init.el~ header

#+begin_src emacs-lisp
;;; init.el --- Personal configuration file -*- lexical-binding: t; no-byte-compile: t; -*-
#+end_src

** straight.el

[[https://github.com/raxod502/straight.el][GitHub - radian-software/straight.el]]

Some rules/conventions:

- When packages don't require installation, use ~:straight (:type built-in)~.
- Prefer multiple ~setq~ expressions to one.
- Prefer ~:init~ to ~:custom~.

** Boostrap ~straight.el~

#+begin_src emacs-lisp
(setq straight-use-package-by-default t)
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 6))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
	(url-retrieve-synchronously
	 "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
	 'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
(straight-use-package 'use-package)
(straight-use-package 'org)
#+end_src


* Emacs
:PROPERTIES:
:header-args: :tangle init.el
:END:

** General configuration options

#+begin_src emacs-lisp
(use-package emacs
  :straight (:type built-in)
  :config
  (setq user-full-name "Christian Hageloch")
  (setq use-short-answers t)
  (setq indent-tabs-mode nil)
  (blink-cursor-mode nil)
  (setq make-backup-files nil)
  (setq auto-save-default nil)
  (setq backup-directory-alist
	`((".*" . ,(concat user-emacs-directory "backups")))
	auto-save-file-name-transforms
	`((".*" ,(concat user-emacs-directory "backups") t)))
  (setq create-lockfiles nil)
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
  (setq display-line-numbers-type 'relative)
  (column-number-mode)
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)
  (global-hl-line-mode t)
  (global-auto-revert-mode 1)
  (setq global-auto-revert-non-file-buffers t)
  (setq find-file-visit-truename t)
  (setq completion-cycle-threshold 3)
  (setq tab-always-indent 'complete)
  (set-default-coding-systems 'utf-8))
#+end_src

** Reload configuration

#+begin_src emacs-lisp
(defun chris/config-reload ()
  "Reload the configuration file"
  (interactive)
  (load-file (expand-file-name "~/.emacs.d/init.el")))
#+end_src

** Electric

#+begin_src emacs-lisp
(use-package electric
  :straight (:type built-in)
  :config
  (setq electric-pair-pairs '(
			     (?\{ . ?\})
			     (?\( . ?\))
			     (?\[ . ?\])
			     (?\" . ?\")
			     ))
  :init
  (electric-pair-mode t))
#+end_src


* Keybindings
:PROPERTIES:
:header-args: :tangle init.el
:END:

** General ([[https://github.com/noctuid/general.el][general.el]])

*** General setup

#+begin_src emacs-lisp
(use-package general
  :config
  ;; integrate general with evil
  (general-evil-setup)
  ;; set up 'SPC' as the global leader key
  (general-create-definer chris/leader-keys
    :states '(normal insert visual emacs)
    :keymaps 'override
    :prefix "SPC" ;; set leader
    :global-prefix "M-SPC") ;; access leader in insert mode

  ;; set up ',' as the local leader key
  (general-create-definer chris/local-leader-keys
    :states '(normal insert visual emacs)
    :keymaps 'override
    :prefix "," ;; set local leader
    :global-prefix "M-,") ;; access local leader in insert mode

  (general-define-key
   :states 'insert
   "C-g" 'evil-normal-state) ;; don't stretch for ESC

  ;; unbind some annoying default bindings
  (general-unbind
    "C-x C-r"	;; unbind find file read only
    "C-x C-z"	;; unbind suspend frame
    "C-x C-d"	;; unbind list directory
    "<mouse-2>") ;; pasting with mouse wheel click

  (chris/leader-keys
    "SPC" '(execute-extended-command :wk "execute command"))) ;; an alternative to 'M-x'
#+end_src

*** Keybindings for files

| Keybinding | Function            | Description                                              |
|------------+---------------------+----------------------------------------------------------|
| SPC f f    | find-file           | Find a file in current working directory                 |
| SPC f z    | affe-find           | Affe is a fuzzy finder (also works in current directory) |
| SPC f g    | affe-grep           | Affe but not with files and rather with grep             |
| SPC f r    | consult-recent-file | Find recently opened files using recentf                 |
| SPC f s    | save-buffer         | Save a file                                              |
| SPC f u    | sudo-edit-find-file | Open a file as sudo                                      |
| SPC f C    | copy-file           | Copy the current file                                    |
| SPC f D    | delete-file         | Delete the current file                                  |
| SPC f R    | rename-file         | Rename the current file                                  |
| SPC f S    | write-file          | Safe the current file as <name>                          |
| SPC f U    | sudo-edit           | Convert file write process to sudo                       |

#+begin_src emacs-lisp
(chris/leader-keys
  "f" '(:ignore t :wk "file")
  "ff" '(find-file :wk "find file")
  "fz" '(affe-find :wk "fuzzy finder")
  "fg" '(affe-grep :wk "fuzzy finder (grep)")
  "fr" '(consult-recent-file :wk "Recent files")
  "fs" '(save-buffer :wk "Save file")
  "fu" '(sudo-edit-find-file :wk "Sudo find file")
  "fC" '(copy-file :wk "Copy file")
  "fD" '(delete-file :wk "Delete file")
  "fR" '(rename-file :wk "Rename file")
  "fS" '(write-file :wk "Save file as...")
  "fU" '(sudo-edit :wk "Sudo edit file"))
#+end_src

*** Keybindings for buffers

| Keybinding | Function                     | Description                                                                     |
|------------+------------------------------+---------------------------------------------------------------------------------|
| SPC b i    | ibuffer                      | Open ibuffer                                                                    |
| SPC b b    | consult-buffer               | Pick buffer from a list of open buffers                                         |
| SPC b f    | chris/toggle-maximize-buffer | Toggle monocle mode for currently focused buffer                                |
| SPC b k    | kill-current-buffer          | Kill the current buffer                                                         |
| SPC b v    | chris/buffers-vc-root        | Pick buffer from a list of open buffers in current project directory            |
| SPC b m    | chris/buffers-major-mode     | Picks buffer from a list of open buffers with same major mode of current buffer |
| SPC b n    | next-buffer                  | Goto the next buffer                                                            |
| SPC b p    | previous-buffer              | Goto the previous buffer                                                        |
| SPC b B    | ibuffer-list-buffers         | Get a list of all open buffers                                                  |
| SPC b r    | revert-buffer                | Revert the buffer to the initial state                                          |
| SPC b s    | chris/simple-scratch-buffer  | Open a scratch buffer with same major mode as current buffer                    |
| SPC b K    | kill-buffer                  | Pick from a menu of buffers to kill                                             |

#+begin_src emacs-lisp
(chris/leader-keys
  "b" '(:ignore t :wk "buffer")
  "bi" '(ibuffer :wk "ibuffer")
  "bb" '(consult-buffer :wk "switch buffer")
  "bf" '(chris/toggle-maximize-buffer :wk "Toggle maximize buffer")
  "bc" '(clone-indirect-buffer-other-window :wk "Clone indirect buffer other window")
  "bk" '(kill-current-buffer :wk "Kill current buffer")
  "bv" '(chris/buffers-vc-root :wk "Buffers in project root") 
  "bm" '(chris/buffers-major-mode :wk "Buffers with same major mode")
  "bn" '(next-buffer :wk "Next buffer")
  "bp" '(previous-buffer :wk "Previous buffer")
  "bB" '(ibuffer-list-buffers :wk "Ibuffer list buffers")
  "br" '(revert-buffer :wk "Revert Buffer")
  "bs" '(chris/simple-scratch-buffer :wk "Revert Buffer")
  "bK" '(kill-buffer :wk "Kill buffer"))
#+end_src

*** Keybindings to toggle things

| Keybinding | Function                  | Description                         |
|------------+---------------------------+-------------------------------------|
| SPC t r    | chris/config-reload       | Reload the configuration (~init.el~)  |
| SPC t l    | chris/toggle-line-numbers | Toggle visibility of line numbers   |
| SPC t m    | chris/hide-mode-line-mode | Hide visibility of the modeline     |
| SPC t t    | modus-themes-toggle       | Toggle between the two modus-themes |

#+begin_src emacs-lisp
(chris/leader-keys
  "t"  '(:ignore t :wk "toggle")
  "tr" '(chris/config-reload :wk "config")
  "tl" '(chris/toggle-line-numbers :wk "linenumbers")
  "tm" '(chris/hide-mode-line-mode :wk "linenumbers")
  "ts" '(chris/tab-status-line :wk "tab-bar-line")
  "tt" '(modus-themes-toggle :wk "theme"))
#+end_src

*** Keybindings to open programs within Emacs

| Keybinding | Function                  | Description                                     |
|------------+---------------------------+-------------------------------------------------|
| SPC o t    | vterm                     | Open a vterm buffer                             |
| SPC o e    | eshell                    | Open an eshell buffer                           |
| SPC o s    | fontaine-set-preset       | Choose a fontaine preset                        |
| SPC o w    | woman                     | Pick from a list of manpages and display it     |
| SPC o f    | chris/olivetti-mode       | Open custom olivetti for better focus           |
| SPC o u    | undo-tree-visualize       | Open undo-tree                                  |
| SPC o l    | org-toggle-link-display   | Display org-mode links (don't truncate them)    |
| SPC o c    | org-capture               | Open org-capture for "note-taking"              |
| SPC o a    | org-agenda                | Open org-agenda for "taks-scheduling"           |
| SPC o o    | occur "^*+"               | Get an outline (headings) of org-mode files     |
| SPC o b    | bluetooth-list-devices    | Get a list of bluetooth devices                 |
| SPC o i    | chris/nmcli-wifi-preexist | Menu to manage preexisting internet connections |
| SPC o I    | chris/nmcli-wifi          | Menu to manage possible wifi connections        |

#+begin_src emacs-lisp
(chris/leader-keys
  "o" '(:ignore t :wk "open")
  "ot" '(vterm :wk "vterm")
  "oe" '(eshell :wk "eshell")
  "op" '(list-processes :wk "get a list of processes")
  "os" '(fontaine-set-preset :wk "fontaine")
  "ow" '(woman :wk "woman")
  "of" '(chris/olivetti-mode :wk "olivetti")
  "ou" '(undo-tree-visualize :wk "undo-tree")
  "ol" '(org-toggle-link-display :wk "Display org links")
  "oc" '(org-capture :wk "org campture")
  "oa" '(org-agenda :wk "org campture")
  "oo" '(occur "^*+" :wk "org sidebar")
  "ob" '(bluetooth-list-devices :wk "List bluetooth devices")
  "oi" '(chris/nmcli-wifi-preexist :wk "internet preexisting")
  "oI" '(chris/nmcli-wifi :wk "Connect wifi")
  )
#+end_src

*** Keybindings for code

#+begin_src emacs-lisp
(chris/leader-keys
  "c" '(:ignore t :wk "code-action")
  "cc" '(compile :wk "Compile"))
#+end_src

** Hydra ([[https://github.com/abo-abo/hydra][hydra]])

#+begin_src emacs-lisp
(use-package hydra
  :defer t
  :config
  ;; scale text
  (defhydra hydra-text-scale (:timeout 4)
    "scale text"
    ("j" text-scale-increase "in")
    ("k" text-scale-decrease "out")
    ("f" nil "finished" :exit t))

  ;; split size
  (defhydra hydra-split-size (:timeout 4)
    "increase/decrease split size"
    ("h" shrink-window-horizontally)
    ("j" enlarge-window)
    ("k" shrink-window)
    ("l" enlarge-window-horizontally)
    ("n" balance-windows)
    ("f" nil "finished" :exit t))

  :general
  (chris/leader-keys
    "h" '(:ignore t :wk "hydra")
    "hf" '(hydra-text-scale/body :wk "scale text")
    "hs" '(hydra-split-size/body :wk "split size")))
#+end_src

** Evil ([[https://github.com/emacs-evil/evil][evil]])

*** General evil setup

#+begin_src emacs-lisp
(use-package evil
  :general
  (chris/leader-keys
    "w" '(:keymap evil-window-map :wk "window")) ;; window bindings
  :init
  (setq evil-search-module 'isearch)

  (setq evil-want-C-u-scroll t) ;; allow scroll up with 'C-u'
  (setq evil-want-C-d-scroll t) ;; allow scroll down with 'C-d'

  (setq evil-want-integration t) ;; necessary for evil collection
  (setq evil-want-keybinding nil)

  (setq evil-split-window-below t)
  (setq evil-vsplit-window-right t)

  ;; cursors
  (setq evil-normal-state-cursor 'box)
  (setq evil-insert-state-cursor 'box)
  (setq evil-visual-state-cursor 'box)
  (setq evil-motion-state-cursor 'box)
  (setq evil-replace-state-cursor 'box)
  (setq evil-operator-state-cursor 'box)

  (setq evil-want-C-i-jump nil) ;; hopefully this will fix weird tab behaviour

  (setq evil-undo-system 'undo-tree) ;; undo via 'u', and redo the undone change via 'C-r'; only available in emacs 28+.
  :config
  (evil-mode t) ;; globally enable evil mode
  ;; set the initial state for some kinds of buffers.
  (evil-set-initial-state 'messages-buffer-mode 'normal)
  (evil-set-initial-state 'dashboard-mode 'normal)
  ;; buffers in which I want to immediately start typing should be in 'insert' state by default.
  (evil-set-initial-state 'eshell-mode 'insert)
  (evil-set-initial-state 'magit-diff-mode 'insert))
#+end_src

*** Undo tree ([[https://elpa.gnu.org/packages/undo-tree.html][undo-tree]])

#+begin_src emacs-lisp
(use-package undo-tree
  :after evil
  :config
  (setq undo-tree-history-directory-alist '(("." . "~/.emacs.d/undo")))
  :init
  (global-undo-tree-mode))
#+end_src

*** Evil collection ([[https://github.com/emacs-evil/evil-collection][evil-collection]])

#+begin_src emacs-lisp
(use-package evil-collection ;; evilifies a bunch of things
  :after evil
  :init
  (setq evil-collection-outline-bind-tab-p t) ;; '<TAB>' cycles visibility in 'outline-minor-mode'
  ;; If I want to incrementally enable evil-collection mode-by-mode, I can do something like the following:
  ;; (setq evil-collection-mode-list nil) ;; I don't like surprises
  ;; (add-to-list 'evil-collection-mode-list 'magit) ;; evilify magit
  ;; (add-to-list 'evil-collection-mode-list '(pdf pdf-view)) ;; evilify pdf-view
  :config
  (evil-collection-init))
#+end_src

*** Evil-org ([[https://github.com/Somelauw/evil-org-mode][evil-org-mode]])

#+begin_src emacs-lisp
(use-package evil-org
  :after org
  :hook (org-mode . (lambda () evil-org-mode))
  :config
  (require 'evil-org-agenda)
  (evil-org-agenda-set-keys))
#+end_src

*** Evil commentary ([[https://github.com/linktohack/evil-commentary][evil-commentary]])

#+begin_src emacs-lisp
(use-package evil-commentary
  :after evil
  :config
  (evil-commentary-mode)) ;; globally enable evil-commentary
#+end_src

*** C-d and C-u

#+begin_src emacs-lisp
(defun chris/scroll-down-and-center ()
"Scroll down and center the text to the screen"
  (interactive)
  (evil-scroll-down 0)
  (evil-scroll-line-to-center (line-number-at-pos)))

(define-key evil-motion-state-map "\C-d" 'chris/scroll-down-and-center)

(defun chris/scroll-up-and-center ()
"Scroll up and center the text to the screen"
  (interactive)
  (evil-scroll-up 0)
  (evil-scroll-line-to-center (line-number-at-pos)))

(define-key evil-motion-state-map "\C-u" 'chris/scroll-up-and-center)
#+end_src

** Whichkey ([[https://github.com/justbur/emacs-which-key][emacs-which-key]])

#+begin_src emacs-lisp
(use-package which-key
  :init
  (which-key-mode)
  :config
  (which-key-setup-minibuffer))
#+end_src


* Org-mode
:PROPERTIES:
:header-args: :tangle init.el
:END:

** General org-mode setup

#+begin_src emacs-lisp
(use-package org
  :config
  (setq org-ellipsis " ")
  (setq orc-src-fontify-natively t)
  (setq src-tab-acts-natively t)
  (setq org-fontify-quote-and-verse-blocks t)
  (setq org-fontify-whole-block-delimiter-line t)
  (setq org-confirm-babel-evaluate nil)
  (setq org-export-with-smart-quotes t)
  (setq org-src-window-setup 'current-window)
  (setq org-hide-emphasis-markers t)
  (setq org-src-preserve-indentation 1)
  (setq org-edit-src-content-indentation 0)

  ;; configure babel languages
  (with-eval-after-load 'org
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)
       (python . t)
       (shell . t)))

    (require 'org-tempo)
    (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("py" . "src python"))

    (push '("conf-unix" . conf-unix) org-src-lang-modes))

  (setq org-directory "~/org")
  (setq org-default-notes-file (concat org-directory "/notes.org")))
#+end_src

** Org-agenda

#+begin_src emacs-lisp
(setq org-agenda-files '("~/org/Agenda.org"))
(setq org-agenda-start-with-log-mode t)
(setq org-log-done 'time)
(setq org-log-into-drawer t)
(setq org-log-done 'time)
#+end_src

** Org-roam ([[https://github.com/org-roam/org-roam][org-roam]])

#+begin_src emacs-lisp
(use-package org-roam
  :init
  (setq org-roam-v2-ack t)
  :custom
  (org-roam-directory "~/orgroam")
  (org-roam-compeltion-everywhere t)
  :bind (("C-c n l" . org-roam-buffer-toggle)
         ("C-c n f" . org-roam-node-find)
         ("C-c n i" . org-roam-node-insert))
  :general
  (chris/leader-keys
    "r" '(:ignore t :wk "org-roam")
    "rt" '(org-roam-buffer-toggle :wk "toggle org-roam buffer")
    "rf" '(org-roam-node-find :wk "find node")
    "ri" '(org-roam-node-insert :wk "insert node"))
  (chris/leader-keys "rd" '(:keymap org-roam-dailies-map :wk "dailies"))
  :config
  (require 'org-roam-dailies)
  (org-roam-db-autosync-mode)
  (org-roam-setup))
#+end_src


* Appearance
:PROPERTIES:
:header-args: :tangle init.el
:END:

** Fonts ([[https://github.com/protesilaos/fontaine][fontaine]])

#+begin_src emacs-lisp  
(use-package fontaine
  :config
  (setq x-underline-at-descent-line t)
  (setq-default text-scale-remap-header-line t)
  (fontaine-set-preset (or (fontaine-restore-latest-preset) 'regular))
  :init
  (setq fontaine-presets
      '((regular
         :default-height 110)
        (medium
         :default-weight semilight
         :default-height 140)
        (large
         :default-weight semilight
         :default-height 180
         :bold-weight extrabold)
        (t ; our shared fallback properties
         :default-family "Iosevka Comfy Wide Fixed"
         :default-weight normal
         ;; :default-height 100
         :fixed-pitch-family nil ; falls back to :default-family
         :fixed-pitch-weight nil ; falls back to :default-weight
         :fixed-pitch-height 1.0
         :variable-pitch-family "Iosevka Comfy Duo"
         :variable-pitch-weight normal
         :variable-pitch-height 1.05
         :bold-family nil ; use whatever the underlying face has
         :bold-weight bold
         :italic-family nil
         :italic-slant italic
         :line-spacing nil))))
#+end_src

** Theme ([[https://protesilaos.com/emacs/modus-themes#h:f0f3dbcb-602d-40cf-b918-8f929c441baf][modus-themes]])

#+begin_src emacs-lisp
(use-package modus-themes
  :config
  (setq modus-themes-bold-constructs t
        modus-themes-italic-construct nil
        modus-themes-common-palette-overrides
        '(
          (border-mode-line-active unspecified)
          (border-mode-line-inactive unspecified)
	  (bg-mode-line-active bg-blue-subtle)
	  (fg-mode-line-active fg-main)
	  (prose-done green-faint)
	  (prose-todo red-faint)
          (fringe unspecified))
        modus-themes-headings
        '((1 . (1.3))
          (2 . (1.2))
          (3 . (1.1))
          (t . (1.0)))
        modus-themes-org-blocks 'gray-background))

(defun chris/modus-themes-custom-faces ()
  (modus-themes-with-colors
    (custom-set-faces
     ;; Add "padding" to the mode lines
     `(mode-line ((,c :box (:line-width 4 :color ,bg-mode-line-active))))
     `(mode-line-inactive ((,c :box (:line-width 4 :color ,bg-mode-line-inactive)))))))

(add-hook 'modus-themes-after-load-theme-hook #'chris/modus-themes-custom-faces)

(modus-themes-load-theme 'modus-vivendi)
#+end_src

** Modeline ([[https://github.com/emacsmirror/diminish][diminish]])

#+begin_src emacs-lisp
(use-package diminish)
(diminish 'auto-revert-mode)
(diminish 'evil-collection-unimpaired-mode)
(diminish 'which-key-mode)
(diminish 'evil-commentary-mode)
(diminish 'undo-tree-mode)
(diminish 'eldoc-mode)

(display-battery-mode)
(setq display-time-default-load-average nil)
(setq display-time-24hr-format 1)
(display-time-mode 1)
#+end_src

** Highlight TODO's and other keywords ([[https://github.com/tarsius/hl-todo][hl-todo]])

#+begin_src emacs-lisp
 (use-package hl-todo
    :hook (prog-mode . hl-todo-mode)
    :config
    (setq hl-todo-highlight-punctuation ":"
          hl-todo-keyword-faces
          `(("TODO"       warning bold)
            ("FIXME"      error bold)
            ("HACK"       font-lock-constant-face bold)
            ("REVIEW"     font-lock-keyword-face bold)
            ("NOTE"       success bold)
            ("DEPRECATED" font-lock-doc-face bold))))
#+end_src


* Bottom menu
:PROPERTIES:
:header-args: :tangle init.el
:END:

** Vertico and orderless ([[https://github.com/minad/vertico][vertico]]) ([[https://github.com/oantolin/orderless][orderless]])

#+begin_src emacs-lisp
(use-package vertico
  :init
  (vertico-mode +1))

(use-package orderless
  :init
  (setq completion-styles '(orderless)
        completion-category-defaults nil
        completion-category-overrides '((fie (styles partial-completion)))))
#+end_src

** Consult ([[https://github.com/minad/consult][consult]])

#+begin_src emacs-lisp
(use-package consult
  :init
  (setq consult-preview-key "$")
  :bind ("C-s" . 'consult-line))

(use-package embark-consult
  :ensure t ; only need to install it, embark loads it after consult if found
  :hook
  (embark-collect-mode . consult-preview-at-point-mode))

(recentf-mode +1)
#+end_src

** Affe ([[https://github.com/minad/affe][affe]])

#+begin_src emacs-lisp
(use-package affe
  :after orderless
  :init
  (setq affe-regexp-function #'orderless-pattern-compiler
        affe-highlight-function #'orderless-highlight-matches)
  (consult-customize affe-grep :preview-key (kbd "M-.")))
#+end_src

** Savehist

#+begin_src emacs-lisp
(use-package savehist
  :straight (:type built-in)
  :config
  (setq history-length 25)
  :init
  (savehist-mode))
#+end_src

** Marginalia ([[https://github.com/minad/marginalia][marginalia]])

#+begin_src emacs-lisp
(use-package marginalia
  :after vertico
  :ensure t
  :custom
  (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
  :init
  (marginalia-mode))
#+end_src


* File management
:PROPERTIES:
:header-args: :tangle init.el
:END:

** Dired

#+begin_src emacs-lisp
(use-package dired
  :straight (:type built-in)
  :general
  (chris/leader-keys
    "d" '(:ignore t :wk "dired")
    "dd" '(dired :wk "Open Dired")
    "dj" '(dired-jump :wk "Jump to current directory in dired"))
  :config
  (put 'dired-find-alternate-file 'disabled nil))
#+end_src

** 0x0 ([[https://github.com/emacsmirror/0x0][0x0]])

#+begin_src emacs-lisp
(use-package 0x0
  :general
  (chris/leader-keys
    "x" '(:ignore t :wk "web")
    "x;" '(0x0-dwim t :wk "0x0 dwim")
    "xt" '(0x0-upload-text :wk "0x0 upload text")
    "xf" '(0x0-upload-file :wk "0x0 upload file")
    "xk" '(0x0-upload-kill-ring :wk "0x0 upload kill ring")
    "xp" '(0x0-popup :wk "0x0 popup")
    "xs" '(0x0-shorten-uri :wk "0x0 shorten url")))
#+end_src

** Sudo Edit

#+begin_src emacs-lisp
(use-package sudo-edit)
#+end_src

** Openwith ([[https://github.com/thisirs/openwith][openwith]])

#+begin_src emacs-lisp
(use-package openwith
  :config
  (setq openwith-associations
        (list
         (list (openwith-make-extension-regexp
                '("doc" "xls" "xlsx" "ppt" "odt" "ods" "odg" "odp"))
               "$HOME/.local/share/applications/LibreOffice-still.basic-x86_64.AppImage"
               '(file))
         ))
  (openwith-mode 1))
#+end_src

** Calendar

#+begin_src emacs-lisp
(setq calendar-week-start-day 1
      calendar-day-name-array ["Sonntag" "Montag" "Dienstag" "Mittwoch"
			       "Donnerstag" "Freitag" "Samstag"]
      calendar-month-name-array ["Januar" "Februar" "März" "April" "Mai"
				 "Juni" "Juli" "August" "September"
				 "Oktober" "November" "Dezember"])
(setq solar-n-hemi-seasons
      '("Frühlingsanfang" "Sommeranfang" "Herbstanfang" "Winteranfang"))

(setq holiday-general-holidays
      '((holiday-fixed 1 1 "Neujahr")
        (holiday-fixed 5 1 "1. Mai")
        (holiday-fixed 10 3 "Tag der Deutschen Einheit")))

;; Feiertage für Bayern, weitere auskommentiert
(setq holiday-christian-holidays
      '((holiday-float 12 0 -4 "1. Advent" 24)
        (holiday-float 12 0 -3 "2. Advent" 24)
        (holiday-float 12 0 -2 "3. Advent" 24)
        (holiday-float 12 0 -1 "4. Advent" 24)
        (holiday-fixed 12 25 "1. Weihnachtstag")
        (holiday-fixed 12 26 "2. Weihnachtstag")
        (holiday-fixed 1 6 "Heilige Drei Könige")
        (holiday-easter-etc -48 "Rosenmontag")
        ;; (holiday-easter-etc -3 "Gründonnerstag")
        (holiday-easter-etc  -2 "Karfreitag")
        (holiday-easter-etc   0 "Ostersonntag")
        (holiday-easter-etc  +1 "Ostermontag")
        (holiday-easter-etc +39 "Christi Himmelfahrt")
        (holiday-easter-etc +49 "Pfingstsonntag")
        (holiday-easter-etc +50 "Pfingstmontag")
        (holiday-easter-etc +60 "Fronleichnam")
        (holiday-fixed 8 15 "Mariae Himmelfahrt")
        (holiday-fixed 11 1 "Allerheiligen")
        ;; (holiday-float 11 3 1 "Buss- und Bettag" 16)
        (holiday-float 11 0 1 "Totensonntag" 20)))

(setq calendar-holidays holiday-christian-holidays)
#+end_src

** Olivetti ([[https://github.com/rnkn/olivetti][olivetti]])

#+begin_src emacs-lisp
(use-package olivetti
  :config
  (setq olivetti-body-width 0.65)
  (setq olivetti-minimum-body-width 72)
  (setq olivetti-recall-visual-line-mode-entry-state t)

  (define-minor-mode chris/olivetti-mode
    "Toggle buffer-local `olivetti-mode' with additional parameters.
Fringes are disabled.  The modeline is hidden, except for
`prog-mode' buffers (see `chris/hidden-mode-line-mode')."
    :init-value nil
    :global nil
    (if chris/olivetti-mode
        (progn
          (olivetti-mode 1)
          (olivetti-set-width 80)
          (set-window-fringes (selected-window) 0 0)
          (unless (derived-mode-p 'prog-mode)
            (chris/turn-on-hide-mode-line-mode))
          (window-divider-mode 1))
      (olivetti-mode -1)
      (set-window-fringes (selected-window) nil) ; Use default width
      (unless (derived-mode-p 'prog-mode)
        (chris/turn-off-hide-mode-line-mode))
      (window-divider-mode -1)
      )))

;; this piece of code is directly copied from Hlissner
;; I attach a prefix to dinstinguish custom functions
(defvar chris/hide-mode-line-format nil
  "The modeline format to use when `chris/hide-mode-line-mode' is active.")

(defvar chris/hide-mode-line-excluded-modes '(fundamental-mode)
  "List of major modes where `chris/global-hide-mode-line-mode' won't affect.")

(defvar-local chris/hide-mode-line--old-format nil
  "Storage for the old `mode-line-format', so it can be restored when
`chris/hide-mode-line-mode' is disabled.")

(define-minor-mode chris/hide-mode-line-mode
  "Minor mode to hide the mode-line in the current buffer."
  :init-value nil
  :global nil
  (if chris/hide-mode-line-mode
      (progn
	(add-hook 'after-change-major-mode-hook #'chris/hide-mode-line-mode nil t)
	(unless chris/hide-mode-line--old-format
	  (setq chris/hide-mode-line--old-format mode-line-format))
	(setq mode-line-format chris/hide-mode-line-format))
    (remove-hook 'after-change-major-mode-hook #'chris/hide-mode-line-mode t)
    (setq mode-line-format chris/hide-mode-line--old-format
	  chris/hide-mode-line--old-format nil))
  (when (called-interactively-p 'any)
    (redraw-display)))

;; Ensure major-mode or theme changes don't overwrite these variables
(put 'chris/hide-mode-line--old-format 'permanent-local t)
(put 'chris/hide-mode-line-mode 'permanent-local-hook t)

(define-globalized-minor-mode chris/global-hide-mode-line-mode
  chris/hide-mode-line-mode chris/turn-on-hide-mode-line-mode
  (redraw-display))

(defun chris/turn-on-hide-mode-line-mode ()
  "Turn on `chris/hide-mode-line-mode'.
Unless in `fundamental-mode' or `chris/hide-mode-line-excluded-modes'."
  (unless (memq major-mode chris/hide-mode-line-excluded-modes)
    (chris/hide-mode-line-mode +1)))

(defun chris/turn-off-hide-mode-line-mode ()
  "Turn off `chris/hide-mode-line-mode'."
  (chris/hide-mode-line-mode -1))
#+end_src


* Buffer management
:PROPERTIES:
:header-args: :tangle init.el
:END:

** Get all buffers with the same major mode as the current file

#+begin_src emacs-lisp
(defun chris/buffers-major-mode (&optional arg)
  "Select buffers that match the current buffer's major mode.
With \\[universal-argument] produce an `ibuffer' filtered
accordingly.  Else use standard completion."
  (interactive "P")
  (let* ((major major-mode)
	 (prompt "Buffers for ")
	 (mode-string (format "%s" major))
	 (mode-string-pretty (propertize mode-string 'face 'success)))
    (if arg
	(ibuffer t (concat "*" prompt mode-string "*")
		 (list (cons 'used-mode major)))
      (switch-to-buffer
       (read-buffer
	(concat prompt mode-string-pretty ": ") nil t
	(lambda (pair) ; pair is (name-string . buffer-object)
	  (with-current-buffer (cdr pair) (derived-mode-p major))))))))
#+end_src

** Get all buffers in current project (vc-root)

#+begin_src emacs-lisp
(defun chris/buffers-vc-root (&optional arg)
  "Select buffers that match the present `vc-root-dir'.
With \\[universal-argument] produce an `ibuffer' filtered
accordingly.  Else use standard completion.

When no VC root is available, use standard `switch-to-buffer'."
  (interactive "P")
  (let* ((root (vc-root-dir))
         (prompt "Buffers for VC ")
         (vc-string (format "%s" root))
         (vc-string-pretty (propertize vc-string 'face 'success)))
    (if root
        (if arg
            (ibuffer t (concat "*" prompt vc-string "*")
                     (list (cons 'filename (expand-file-name root))))
          (switch-to-buffer
           (read-buffer
            (concat prompt vc-string-pretty ": ") nil t
            (lambda (pair) ; pair is (name-string . buffer-object)
              (with-current-buffer (cdr pair) (string= (vc-root-dir) root))))))
      (call-interactively 'switch-to-buffer))))
#+end_src

** Maximize a buffer

#+begin_src emacs-lisp
(defun chris/toggle-maximize-buffer ()
  "Maximize buffer"
  (interactive)
  (if (= 1 (length (window-list)))
      (jump-to-register '_) 
    (progn
      (window-configuration-to-register '_)
      (delete-other-windows))))
#+end_src

** Kill all dired buffers

#+begin_src emacs-lisp
(defun chris/kill-dired-buffers ()
  "Kill all open dired buffers."
  (interactive)
  (mapc (lambda (buffer)
          (when (eq 'dired-mode (buffer-local-value 'major-mode buffer))
            (kill-buffer buffer)))
        (buffer-list)))
#+end_src

** Create custom scratch buffers

#+begin_src emacs-lisp
;;; Generic setup
(defun chris/simple--scratch-list-modes ()
  "List known major modes."
  (cl-loop for sym the symbols of obarray
	   when (and (functionp sym)
		     (and (provided-mode-derived-p sym 'prog-mode 'org-mode)))
	   collect sym))

(defun chris/simple--scratch-buffer-setup (region &optional mode)
  "Add contents to `scratch' buffer and name it accordingly.

REGION is added to the contents to the new buffer.

Use the current buffer's major mode by default.  With optional
MODE use that major mode instead."
  (let* ((major (or mode major-mode))
         (string (format "Scratch buffer for: %s\n\n" major))
         (text (concat string region))
         (buf (format "*Scratch for %s*" major)))
    (with-current-buffer (get-buffer-create buf)
      (funcall major)
      (save-excursion
        (insert text)
        (goto-char (point-min))
        (comment-region (point-at-bol) (point-at-eol)))
      (vertical-motion 2))
    (pop-to-buffer buf)))

(defun chris/simple-scratch-buffer (&optional arg)
  "Produce a bespoke scratch buffer matching current major mode.

If the major-mode is not derived from 'prog-mode, it prompts for
a list of all derived prog-modes AND org-mode

If region is active, copy its contents to the new scratch
buffer."
  (interactive "P")
  (let* ((modes (chris/simple--scratch-list-modes))
         (region (with-current-buffer (current-buffer)
                   (if (region-active-p)
                       (buffer-substring-no-properties
                        (region-beginning)
                        (region-end))
                     "")))
         (m))
    (if (derived-mode-p 'prog-mode)
        (chris/simple--scratch-buffer-setup region)
      (progn
	(setq m (intern (completing-read "Select major mode: " modes nil t)))
	(chris/simple--scratch-buffer-setup region m)))))
#+end_src

** Toggle line numbers

#+begin_src emacs-lisp
(defun chris/toggle-line-numbers ()
  "Toggles the display of line numbers. Applies locally to the current buffer"
  (interactive)
  (if (bound-and-true-p display-line-numbers-mode)
      (display-line-numbers-mode -1)
    (display-line-numbers-mode)))
#+end_src


* Desktop environment (kindof)
:PROPERTIES:
:header-args: :tangle init.el
:END:

** Internet 

*** Handle preexisting connections

Display a table of all pre configured internet connections.

Keybindings:

| Keybinding | Function                             | Description                       |
| Return     | chris/nmcli-wifi-preexist-connect    | connect to the selected ssid      |
| C-Return   | chris/nmcli-wifi-preexist-disconnect | disconnect from the selected ssid |
| M-Return   | chris/nmcli-wifi-preexist-refresh    | refresh the buffer to see changes |

#+begin_src emacs-lisp
(define-derived-mode chris/nmcli-wifi-preexist-mode tabulated-list-mode
  "nmcli-wifi-preexist"
  "nmcli preexisting WiFi Mode"
  (let ((columns [("NAME" 20 t)
                  ("UUID" 40 t)
                  ("TYPE" 10 t)
                  ("DEVICE" 10 t)])
        (rows (chris/nmcli-wifi-preexist--shell-command)))
    (setq tabulated-list-format columns)
    (setq tabulated-list-entries rows)
    (tabulated-list-init-header)
    (tabulated-list-print)))

(defun chris/nmcli-wifi-preexist-refresh ()
  (interactive)
  (let ((rows (chris/nmcli-wifi-preexist--shell-command)))
    (setq tabulated-list-entries rows)
    (tabulated-list-print t t)))

(defun chris/nmcli-wifi-preexist--shell-command ()
  (interactive)
  (mapcar (lambda (x)
	    `(,(car (cdr x))
	      ,(vconcat [] x)))
          (mapcar (lambda (x)
		    x)
		  (cdr (mapcar (lambda (x)
				 (split-string x "  " t " "))
			       (split-string (shell-command-to-string "nmcli connection") "\n" t))))))

(defun chris/nmcli-wifi-preexist ()
  (interactive)
  (switch-to-buffer "*nmcli-wifi-preexist*")
  (chris/nmcli-wifi-preexist-mode))

(defun chris/nmcli-wifi-preexist-connect ()
  (interactive)
  (let ((ssid (aref (tabulated-list-get-entry) 1)))
    (async-shell-command (format "nmcli connection up \"%s\"" ssid))))

(defun chris/nmcli-wifi-preexist-disconnect ()
  (interactive)
  (let ((ssid (aref (tabulated-list-get-entry) 1)))
    (async-shell-command (format "nmcli connection down \"%s\"" ssid))))

(define-key chris/nmcli-wifi-preexist-mode-map (kbd "<return>") 'chris/nmcli-wifi-preexist-connect)
(define-key chris/nmcli-wifi-preexist-mode-map (kbd "<C-return>") 'chris/nmcli-wifi-preexist-disconnect)
(define-key chris/nmcli-wifi-preexist-mode-map (kbd "<M-return>") 'chris/nmcli-wifi-preexist-refresh)

(add-to-list 'display-buffer-alist
	     (cons "\\*Async Shell Command\\*.*" (cons #'display-buffer-no-window nil)))
#+end_src

*** Connect to internet

Display a table of all possible wifi connections. 

Keybindings:

| Keybinding | Function                    | Description                       |
| Return     | chris/nmcli-wifi-connect    | connect to the selected ssid      |
| C-Return   | chris/nmcli-wifi-disconnect | disconnect from the selected ssid |
| M-Return   | chris/nmcli-wifi-refresh    | refresh the buffer to see changes |

#+begin_src emacs-lisp
(define-derived-mode chris/nmcli-wifi-mode tabulated-list-mode
  "nmcli-wifi"
  "nmcli WiFi Mode"
  (let ((columns [("IN-USE" 10 t)
                  ("SSID" 30 t)
                  ("MODE" 10 t)
                  ("CHAN" 5 t)
                  ("RATE" 15 t)
                  ("SIGNAL" 10 t)
                  ("BARS" 5 t)
                  ("SECURITY" 10 t)])
        (rows (chris/nmcli-wifi--shell-command)))
    (setq tabulated-list-format columns)
    (setq tabulated-list-entries rows)
    (tabulated-list-init-header)
    (tabulated-list-print)))

;; TODO: Try to rescan first
(defun chris/nmcli-wifi-refresh ()
  (interactive)
  (let ((rows (chris/nmcli-wifi--shell-command)))
    (setq tabulated-list-entries rows)
    (tabulated-list-print t t)))

(defun chris/nmcli-wifi--shell-command ()
  (interactive)
  (mapcar (lambda (x)
            `(,(car (cdr x))
              ,(vconcat [] x)))
          (mapcar (lambda (x)
                    (if (string= "*" (car x)) x (cons "" x)))
                  (cdr (mapcar (lambda (x)
                                 (split-string x "  " t " "))
                               (split-string (shell-command-to-string "nmcli dev wifi") "\n" t))))))

(defun chris/nmcli-wifi ()
  (interactive)
  (switch-to-buffer "*nmcli-wifi*")
  (chris/nmcli-wifi-mode))

(defun chris/nmcli-wifi-connect ()
  (interactive)
  (let ((ssid (aref (tabulated-list-get-entry) 1))
        (passwordRequired (not (string= "--" (aref (tabulated-list-get-entry) 7)))))
    (if (not passwordRequired)
        (async-shell-command (format "nmcli dev wifi connect \"%s\"" ssid))
      (let ((password (read-passwd "Password: ")))
        (progn (async-shell-command (format "nmcli dev wifi connect \"%s\" password %s" ssid password))
               (clear-string password))))))

(defun chris/nmcli-wifi-disconnect ()
  (interactive)
  (let ((ssid (aref (tabulated-list-get-entry) 2)))
    (async-shell-command (format "nmcli connection down \"%s\"" ssid))))

(define-key chris/nmcli-wifi-mode-map (kbd "<return>") 'chris/nmcli-wifi-connect)
(define-key chris/nmcli-wifi-mode-map (kbd "<C-return>") 'chris/nmcli-wifi-disconnect)
(define-key chris/nmcli-wifi-mode-map (kbd "<M-return>") 'chris/nmcli-wifi-refresh)
#+end_src

** Bluetooth

Keybindings:

| Key       | Command                                                                                                |
|-----------+--------------------------------------------------------------------------------------------------------|
| P         | pair with a device                                                                                     |
| c         | connect to a device (may start pairing procedure); with a prefix argument, connect to a single profile |
| d         | disconnect a device; with a prefix argument, disconnect a single profile                               |
| a         | set or reset a device's alias                                                                          |
| t         | toggle the trusted property of a device                                                                |
| b         | toggle the blocked property of a device (disconnects connected device)                                 |
| k         | remove a device (will disconnect and unpair)                                                           |
| i         | show device information, such as RSSI value, device class and services                                 |
| A         | show host adapter information                                                                          |
| r         | start discovery (scan) mode                                                                            |
| R         | stop discovery (scan) mode                                                                             |
| D         | toggle the discoverable property of the adapter                                                        |
| x         | toggle the pairable property of the adapter                                                            |
| s         | toggle the power supply of the adapter                                                                 |
| n         | next line                                                                                              |
| p         | previous line                                                                                          |
| <         | go to the beginning of the list                                                                        |
| >         | go to the end of the list                                                                              |
| g         | revert the buffer; this queries the bus for accessible devices                                         |
| S         | sort list by column at point                                                                           |
| h or ?    | describe the mode                                                                                      |
| q         | bury the buffer                                                                                        |
| =M-x imenu= | invoke imenu to select a device                                                                        |

#+begin_src emacs-lisp
(use-package bluetooth)
#+end_src


* Projectile ([[https://github.com/bbatsov/projectile][projectile]])
:PROPERTIES:
:header-args: :tangle init.el
:END:

#+begin_src emacs-lisp
(use-package projectile
  :general
  (chris/leader-keys "p" '(:keymap projectile-command-map :wk "projectile"))
  :init
  (projectile-mode +1)
  (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
  (add-to-list 'projectile-globally-ignored-modes "org-mode"))
(setq projectile-indexing-method 'hybrid)

(use-package ibuffer-projectile
  :config 
  (add-hook 'ibuffer-hook
            (lambda ()
              (ibuffer-projectile-set-filter-groups)
              (unless (eq ibuffer-sorting-mode 'alphabetic)
                (ibuffer-do-sort-by-alphabetic)))))
#+end_src


* Workspaces (=tab-bar.el=)
:PROPERTIES:
:header-args: :tangle init.el
:END:

** General =tab-bar.el= setup

#+begin_src emacs-lisp
(use-package tab-bar
  :straight (:type built-in)
  :general
  (chris/leader-keys
    "i" '(:keymap tab-prefix-map :wk "tab")
    "is" '(chris/tab-bar-select-tab-dwim :wk "tab-select"))
  :config
  (setq tab-bar-close-button-show nil)
  (setq tab-bar-close-last-tab-choice nil)
  (setq tab-bar-close-tab-select 'recent)
  (setq tab-bar-new-tab-choice t)
  (setq tab-bar-new-tab-to 'right)
  (setq tab-bar-position nil)
  (setq tab-bar-show nil)
  (setq tab-bar-tab-hints nil)
  (setq tab-bar-tab-name-function 'tab-bar-tab-name-current)
  (tab-bar-mode -1)
  (tab-bar-history-mode 1))
#+end_src

** Manage tabs

#+begin_src emacs-lisp
(defun chris/tab-bar-select-tab-dwim ()
  "Do-What-I-Mean function for getting to a `tab-bar-mode' tab.
If no other tab exists, create one and switch to it.  If there is
one other tab (so two in total) switch to it without further
questions.  Else use completion to select the tab to switch to."
  (interactive)
  (let ((tabs (mapcar (lambda (tab)
                        (alist-get 'name tab))
                      (tab-bar--tabs-recent))))
    (cond ((eq tabs nil)
           (tab-new))
          ((eq (length tabs) 1)
           (tab-next))
          (t
           (consult-imenu ()
                          (tab-bar-switch-to-tab
                           (completing-read "Select tab: " tabs nil t)))))))
#+end_src


* IDE Features
:PROPERTIES:
:header-args: :tangle init.el
:END:

** Completion ([[http://company-mode.github.io/][company]])

#+begin_src emacs-lisp
(use-package company
  :config
  (setq company-idle-delay 0)
  (setq company-minium-prefix-length 3))
#+end_src

** LSP ([[https://github.com/joaotavora/eglot][eglot]])

#+begin_src emacs-lisp
(use-package eglot
  :general
  (chris/leader-keys
    "cd" '(flymake-show-buffer-diagnostics :wk "show (lsp) diagnostics"))
  :commands
  eglot)
#+end_src

** Treesitter ([[https://emacs-tree-sitter.github.io/][tree-sitter]])

#+begin_src emacs-lisp
(use-package tree-sitter-langs)

(use-package tree-sitter
  :defer t
  :init
  (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode)
  (global-tree-sitter-mode)
  :custom
  (custom-set-faces
   '(italic ((t nil)))
   '(tree-sitter-hl-face:property ((t (:inherit font-lock-constant-face)))))
  :config
  (setq tree-sitter-debug-jump-buttons t
        tree-sitter-debug-highlight-jump-region t))

(use-package evil-textobj-tree-sitter
  :straight t
  :init
  (define-key evil-outer-text-objects-map "f" (evil-textobj-tree-sitter-get-textobj "function.outer"))
  (define-key evil-inner-text-objects-map "f" (evil-textobj-tree-sitter-get-textobj "function.inner"))
  (define-key evil-outer-text-objects-map "c" (evil-textobj-tree-sitter-get-textobj "comment.outer"))
  (define-key evil-outer-text-objects-map "C" (evil-textobj-tree-sitter-get-textobj "class.outer"))
  (define-key evil-outer-text-objects-map "a" (evil-textobj-tree-sitter-get-textobj ("conditional.outer" "loop.outer"))))
#+end_src

** Indentation ([[https://github.com/Malabarba/aggressive-indent-mode][aggressive-indent-mode]]) ([[https://github.com/DarthFennec/highlight-indent-guides][highlight-indent-guides]])

#+begin_src emacs-lisp
(use-package aggressive-indent
  :diminish
  :init
  (global-aggressive-indent-mode 1))
(add-to-list 'aggressive-indent-excluded-modes 'python-mode)

(use-package highlight-indent-guides
  :diminish
  :config
  (setq highlight-indent-guides-auto-odd-face-perc 30)
  (setq highlight-indent-guides-auto-even-face-perc 35)
  (setq highlight-indent-guides-auto-character-face-perc 40)
  (setq highlight-indent-guides-method 'character)
  :hook
  (prog-mode . highlight-indent-guides-mode))
#+end_src

** Async ([[https://github.com/jwiegley/emacs-async][async]])

#+begin_src emacs-lisp
(use-package async
  :init
  (dired-async-mode 1))
#+end_src

** rg ([[https://github.com/dajva/rg.el][rg.el]])

#+begin_src emacs-lisp
(use-package rg
  :init
  (rg-enable-default-bindings))
#+end_src


* Languages
:PROPERTIES:
:header-args: :tangle init.el
:END:

** Haskell

#+begin_src emacs-lisp
(use-package haskell-mode
  :mode ("\\.hs\\'" . haskell-mode)
  :config
  (defun chris/haskell-open-repl (&optional arg)
    "Opens a Haskell REPL."
    (interactive "P")
    (if-let (window
             (display-buffer
              (haskell-session-interactive-buffer (haskell-session))))
        (window-buffer window)
      (error "Failed to display Haskell REPL")))

  (defun chris/haskell-disable-electric-indent ()
    "Disable electric indent mode if available"
    (if (fboundp 'electric-indent-local-mode)
        (electric-indent-local-mode -1)))

  (defun chris/haskell-format-imports ()
    "Sort and align import statements from anywhere in the source file."
    (interactive)
    (save-excursion
      (haskell-navigate-imports)
      (haskell-mode-format-imports)))
  
  (add-hook 'haskell-mode-hook
            #'haskell-collapse-mode ; support folding haskell code blocks
            (add-to-list 'completion-ignored-extensions ".hi"))

  (add-hook 'haskell-cabal-mode-hook #'chris/haskell-disable-electric-indent)

  :general
  (chris/leader-keys
    :keymaps 'haskell-mode-map
    "hi" 'chris/haskell-format-imports))
#+end_src

** Lua

#+begin_src emacs-lisp
(use-package lua-mode
  :mode ("\\.lua\\'". lua-mode)
  :interpreter ("lua" . lua-mode)
  :config
  (defun chris/open-lua-repl ()
    "open lua repl in horizontal split"
    (interactive)
    (split-window-horizontally)
    (lua-show-process-buffer))
  :init
  (setq lua-indent-level 2
	lua-indent-string-contents t)
  :general
  (chris/leader-keys
    "cl" '(chris/open-lua-repl :wk "run-lua"))
  (chris/leader-keys
    :keymaps 'lua-mode-map
    "lr" 'lua-send-buffer))
#+end_src

** python

#+begin_src emacs-lisp
(use-package python-mode
  :straight (:type built-in)
  :mode ("\\.py\\'" . python-mode)
  :interpreter ("python3" . python-mode)
  :general
  (chris/leader-keys
    :keymaps 'python-mode-map
    "cp" 'run-python)
  (chris/leader-keys
    "pr" 'python-shell-send-buffer))
#+end_src

** php

#+begin_src emacs-lisp
(use-package php-mode
  :mode ("\\.php\\'" . php-mode))
#+end_src

** racket

#+begin_src emacs-lisp
(use-package racket-mode
  :interpreter ("racket" . racket-mode)
  :config
  (defun chris/racket-run-and-switch-to-repl ()
    "Call `racket-run-and-switch-to-repl' and enable insert state"
    (interactive)
    (racket-run-and-switch-to-repl)
    (when (buffer-live-p (get-buffer racket-repl-buffer-name))
      (with-current-buffer racket-repl-buffer-name
	(evil-insert-state))))
  :general
  (chris/leader-keys
    "cr" '(chris/racket-run-and-switch-to-repl :wk "run racket and switch to repl"))
  (chris/leader-keys
    :keymaps 'racket-mode-map
    "rs" '(racket-send-last-sexp :wk "racket send last sexp")
    "rd" '(racket-send-definiton :wk "racket send definition")
    ))
#+end_src

** matlab

#+begin_src emacs-lisp
(straight-use-package 'matlab-mode)
(autoload 'matlab-mode "matlab" "Matlab Editing Mode" t)
(add-to-list
 'auto-mode-alist
 '("\\.m$" . matlab-mode))
(setq matlab-indent-function t)
(setq matlab-shell-command-switches '("-nosplash" "-nodesktop"))
(setq matlab-shell-command "matlab")

(defun chris/open-matlab-shell ()
  (interactive)
  (split-window-horizontally)
  (other-window 1)
  (matlab-shell))

(defun chris/matlab-shell-run-buffer ()
  "Run matlab code"
  (interactive)
  (matlab-shell-run-region (point-min) (point-max)))

(chris/leader-keys
 :keymaps 'matlab-mode-map
 :states 'normal
 "mr" '(chris/matlab-shell-run-buffer :wk "Run matlab buffer"))

(chris/leader-keys
  "cm" '(chris/open-matlab-shell :wk "Open matlab shell"))
#+end_src


* Git ([[https://magit.vc/][Magit]])
:PROPERTIES:
:header-args: :tangle init.el
:END:

#+begin_src emacs-lisp
(use-package magit
  :general
  (chris/leader-keys
    "g" '(:ignore t :wk "git")
    "gg" '(magit-status :wk "status")
    "gG" '(magit-list-repositories :wk "list repos"))
  :config
  (setq magit-push-always-verify nil)
  (setq magit-display-buffer-function #'magit-display-buffer-fullframe-status-v1)
  (setq magit-repository-directories
        '(("~/.local/src"  . 2)
          ("~/.config/" . 2)))
  (setq git-commit-summary-max-length 50)
  :bind
  ("C-x g" . magit-status)
  ("C-x C-g" . magit-list-repositories))
#+end_src


* Terminal
:PROPERTIES:
:header-args: :tangle init.el
:END:

** VTerm ([[https://github.com/akermu/emacs-libvterm][vterm]])

It is important to configure the system shell (in this case bash in the ~.bashrc~):

#+begin_src bash :tangle no
vterm_printf() {
    if [ -n "$TMUX" ] && ([ "${TERM%%-*}" = "tmux" ] || [ "${TERM%%-*}" = "screen" ]); then
        # Tell tmux to pass the escape sequences through
        printf "\ePtmux;\e\e]%s\007\e\\" "$1"
    elif [ "${TERM%%-*}" = "screen" ]; then
        # GNU screen (screen, screen-256color, screen-256color-bce)
        printf "\eP\e]%s\007\e\\" "$1"
    else
        printf "\e]%s\e\\" "$1"
    fi
}

vterm_cmd() {
    local vterm_elisp
    vterm_elisp=""
    while [ $# -gt 0 ]; do
        vterm_elisp="$vterm_elisp""$(printf '"%s" ' "$(printf "%s" "$1" | sed -e 's|\\|\\\\|g' -e 's|"|\\"|g')")"
        shift
    done
    vterm_printf "51;E$vterm_elisp"
}

find_file() {
    vterm_cmd find-file "$(realpath "${@:-.}")"
}
#+end_src

#+begin_src emacs-lisp
(use-package vterm
  :hook
  (vterm-mode . (lambda () (setq-local global-hl-line-mode nil)))
  :init
  (setq vterm-timer-delay 0.01))
#+end_src

** Eshell ([[https://www.gnu.org/software/emacs/manual/html_mono/eshell.html][eshell]])

*** General setup for eshell

#+begin_src emacs-lisp
(defun chris/configure-eshell ()
  (add-hook 'eshell-pre-command-hook 'eshell-save-some-history)
  (add-to-list 'eshell-output-filter-functions 'eshell-truncate-buffer)
  (setq eshell-history-size         10000
        eshell-buffer-maximum-lines 10000
        eshell-hist-ignoredups t
        eshell-scroll-to-bottom-on-input t)
  (setq tramp-default-method "ssh"))

(use-package eshell
  :straight (:type built-in)
  :hook
  (eshell-first-time-mode . chris/configure-eshell)
  :config
  (with-eval-after-load 'esh-opt
    (setq eshell-destroy-buffer-when-process-dies t)
    (setq eshell-visual-commands '("ssh" "tail" "htop" "pulsemixer" "top" "nvim" "vim"))))
#+end_src

*** Git status

#+begin_src emacs-lisp
(defun eshell/gst (&rest args)
  (magit-status (pop args) nil)
  (eshell/echo))   ;; The echo command suppresses output
#+end_src

*** find

#+begin_src emacs-lisp
(defun eshell/find (&rest args)
  "Wrapper around the ‘find’ executable."
  (let ((cmd (concat "find " (string-join args))))
    (shell-command-to-string cmd)))
#+end_src

*** clear

#+begin_src emacs-lisp
(defun my/eshell/clear ()
  "Clear `eshell' buffer.

   Similar to the behavior of `comint-clear-buffer' in `shell'."
  (interactive)
  (let ((input (eshell-get-old-input)))
    (eshell/clear-scrollback)
    (eshell-emit-prompt)
    (insert input)))

(add-hook 'eshell-mode-hook
          (lambda ()
            (define-key eshell-mode-map "\C-l" 'my/eshell/clear)))
#+end_src

*** mkdir and cd

#+begin_src emacs-lisp
(defun eshell/mkdir-and-cd (dir)
  "Create a directory then cd into it."
  (make-directory dir t)
  (eshell/cd dir))
#+end_src


* Some other packages
:PROPERTIES:
:header-args: :tangle init.el
:END:

** Rainbow Mode

#+begin_src emacs-lisp
(use-package rainbow-mode)
#+end_src

** EMMS ([[https://www.gnu.org/software/emms/][emms]])

#+begin_src emacs-lisp
(use-package emms
  :general
  (chris/leader-keys
    "m" '(:ignore t :wk "emms")
    "mm" '(emms :wk "emms")
    "mb" '(emms-smart-browse :wk "EMMS Smart Browse")
    "mi" '(emms-show :wk "EMMS show current song")
    "mn" '(emms-next :wk "EMMS next song")
    "mp" '(emms-previous :wk "EMMS previous song")
    "ml" '(emms-seek-forward :wk "EMMS go 10s forward")
    "mt" '(emms-toggle-repeat-track :wk "EMMS toggle repeat")
    "mh" '(emms-seek-backward :wk "EMMS go 10s backward")))
(require 'emms-setup)
(emms-all)
(emms-default-players)
(emms-mode-line 0)
(emms-playing-time 1)
(setq emms-source-file-default-directory "~/Music/"
      emms-playlist-buffer-name "*Music*"
      emms-info-asynchronously t
      emms-source-file-directory-tree-function 'emms-source-file-directory-tree-find)
#+end_src

** Presentations ([[https://github.com/takaxp/org-tree-slide][org-tree-slide]])

#+begin_src emacs-lisp
(use-package org-tree-slide
  :custom
  (org-tree-slide-breadcrumbs nil)
  (org-tree-slide-header nil)
  (org-tree-slide-in-effect nil)
  (org-tree-slide-slide-in-effect nil)
  (org-tree-slide-heading-emphasis nil)
  (org-tree-slide-cursor-init t)
  (org-tree-slide-never-touch-face t)
  :config
  (defun chris/org-presentation ()
    "Specifies conditions that should apply locally upon activation
of `org-tree-slide-mode'."
    (if (eq org-tree-slide-mode nil)
	(progn
          (chris/olivetti-mode -1)
          (fontaine-set-preset 'regular))
      (chris/olivetti-mode)
      (fontaine-set-preset 'presentation)))
  :hook
  (org-tree-slide-mode . chris/org-presentation)
  )
#+end_src

** PDFs ([[https://github.com/vedang/pdf-tools][pdf-tools]])

#+begin_src emacs-lisp
(use-package pdf-tools
  :config
  (pdf-tools-install)
  (setq-default pdf-view-display-size 'fit-page))
#+end_src

